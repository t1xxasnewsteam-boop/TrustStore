const express = require('express');
const Database = require('better-sqlite3');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cookieParser = require('cookie-parser');
const cors = require('cors');
const path = require('path');
const geoip = require('geoip-lite');
const fetch = require('node-fetch');
const multer = require('multer');
const fs = require('fs');
const cheerio = require('cheerio');
require('dotenv').config();
const nodemailer = require('nodemailer');
const sgMail = require('@sendgrid/mail');
const crypto = require('crypto');
// mail-listener2 —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ imap –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = 'your-secret-key-change-this-in-production'; // –ò–∑–º–µ–Ω–∏ —ç—Ç–æ!

// –î–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–º—É proxy (nginx)
app.set('trust proxy', 1);

// Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7268320384:AAGngFsmkg_x-2rryDtoJkmYD3ymxy5gM9o';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '6185074849';

// YooMoney –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const YOOMONEY_SECRET = process.env.YOOMONEY_SECRET || '2hc5+4LySmLC5E3Hi5yIrZTu'; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ YooMoney
const YOOMONEY_WALLET = process.env.YOOMONEY_WALLET || ''; // –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞

// Heleket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const HELEKET_API_KEY = process.env.HELEKET_API_KEY || 'fVzVPxZlpbUGVZap77b2qvBklv9BhBprbUvkCTWXgyRK3rpoIBHKPvM6ZkWEPZAuwYcjPnWEedKD8IpSxmuswbYZxy0RfHRvsrzWWwlkAxB4IfVy6DFXfnHTc9AQ5jOt'; // API –∫–ª—é—á –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
const HELEKET_MERCHANT_ID = process.env.HELEKET_MERCHANT_ID || '987c3430-d898-43bb-999a-310e3b659cfa'; // Merchant ID
const HELEKET_WEBHOOK_SECRET = process.env.HELEKET_WEBHOOK_SECRET || ''; // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook
const HELEKET_API_URL = process.env.HELEKET_API_URL || 'https://api.heleket.com'; // API URL
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π endpoint:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: https://heleket.com/api/v1/payments
// –ò–ª–∏: https://merchant.heleket.com/api/payments
// –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Heleket –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL

// –ö—ç—à –¥–ª—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
let currencyCache = {
    rate: null,
    lastUpdate: null,
    CACHE_DURATION: 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB –∏–∑ Google Finance (24/7)
async function getUSDRate() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const now = Date.now();
        if (currencyCache.rate && currencyCache.lastUpdate && 
            (now - currencyCache.lastUpdate) < currencyCache.CACHE_DURATION) {
            console.log('üí± –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å USD/RUB:', currencyCache.rate);
            return currencyCache.rate;
        }
        
        // –ú–µ—Ç–æ–¥ 1: Yahoo Finance (Apple Finance) - –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ (24/7, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)
        try {
            const yahooResponse = await fetch('https://query1.finance.yahoo.com/v8/finance/chart/USDRUB=X?interval=1d&range=1d');
            if (yahooResponse.ok) {
                const yahooData = await yahooResponse.json();
                if (yahooData && yahooData.chart && yahooData.chart.result && yahooData.chart.result[0]) {
                    const meta = yahooData.chart.result[0].meta;
                    if (meta && meta.regularMarketPrice) {
                        const rate = parseFloat(meta.regularMarketPrice);
                        if (rate > 0 && rate < 200) { // –†–∞–∑—É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                            currencyCache.rate = rate;
                            currencyCache.lastUpdate = now;
                            console.log('‚úÖ –ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω –∏–∑ Yahoo Finance (Apple Finance):', rate);
                            return rate;
                        }
                    }
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Yahoo Finance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
        }
        
        // –ú–µ—Ç–æ–¥ 2: exchangerate-api (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 24/7)
        try {
            const response = await fetch('https://api.exchangerate-api.com/v4/latest/USD', {
                headers: {
                    'User-Agent': 'TrustStore/1.0'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                
                if (data && data.rates && data.rates.RUB) {
                    const rate = parseFloat(data.rates.RUB);
                    currencyCache.rate = rate;
                    currencyCache.lastUpdate = now;
                    console.log('‚úÖ –ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω –∏–∑ exchangerate-api:', rate);
                    return rate;
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è exchangerate-api –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥...');
        }
        
        // –ú–µ—Ç–æ–¥ 3: Google Finance (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
        try {
            const googleResponse = await fetch('https://www.google.com/finance/quote/USD-RUB', {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });
            
            if (googleResponse.ok) {
                const html = await googleResponse.text();
                // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
                const rateMatch = html.match(/"USD\/RUB"[^}]*"l":\s*"([0-9.]+)"/) || 
                                  html.match(/data-last-price="([0-9.]+)"/) ||
                                  html.match(/"regularMarketPrice":\s*\{[^}]*"raw":\s*([0-9.]+)/);
                
                if (rateMatch && rateMatch[1]) {
                    const rate = parseFloat(rateMatch[1]);
                    if (rate > 0 && rate < 200) {
                        currencyCache.rate = rate;
                        currencyCache.lastUpdate = now;
                        console.log('‚úÖ –ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω –∏–∑ Google Finance:', rate);
                        return rate;
                    }
                }
            }
        } catch (error) {
            console.log('‚ö†Ô∏è Google Finance –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω...');
        }
        
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∫—É—Ä—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π)
        if (currencyCache.rate) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π:', currencyCache.rate);
            return currencyCache.rate;
        }
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å (–ø—Ä–∏–º–µ—Ä–Ω–æ 80 RUB –∑–∞ 1 USD - —Ç–µ–∫—É—â–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π)
        const defaultRate = 80;
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å USD/RUB:', defaultRate);
        currencyCache.rate = defaultRate;
        currencyCache.lastUpdate = now;
        return defaultRate;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB:', error.message);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å
        if (currencyCache.rate) {
            console.log('üí± –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å –∏–∑ –∫—ç—à–∞:', currencyCache.rate);
            return currencyCache.rate;
        }
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫—É—Ä—Å
        return 80;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ RUB –≤ USD
async function convertRUBtoUSD(rubAmount) {
    const rate = await getUSDRate();
    const usdAmount = rubAmount / rate;
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    return Math.round(usdAmount * 100) / 100;
}

// API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ USD/RUB
app.get('/api/currency-rate', async (req, res) => {
    try {
        const rate = await getUSDRate();
        const source = currencyCache.rate === rate ? '–ö—ç—à' : 'Yahoo Finance';
        
        res.json({
            success: true,
            rate: rate,
            source: source,
            timestamp: new Date().toISOString(),
            cached: currencyCache.lastUpdate ? (Date.now() - currencyCache.lastUpdate) / 1000 < currencyCache.CACHE_DURATION / 1000 : false
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞', message: error.message });
    }
});

// ==================== EMAIL CONFIGURATION ====================
const emailTransporter = nodemailer.createTransport({
    host: process.env.EMAIL_HOST || 'smtp.yandex.ru',
    port: parseInt(process.env.EMAIL_PORT) || 465,
    secure: process.env.EMAIL_SECURE === 'true' || true,
    auth: {
        user: process.env.EMAIL_USER || 'orders@truststore.ru',
        pass: process.env.EMAIL_PASSWORD
    },
    tls: {
        rejectUnauthorized: false,
        ciphers: 'SSLv3'
    },
    connectionTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥
    greetingTimeout: 10000,
    socketTimeout: 20000
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SendGrid (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
if (process.env.SENDGRID_API_KEY) {
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
    console.log('‚úÖ SendGrid API –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ email —Å–µ—Ä–≤–µ—Ä—É (async)
emailTransporter.verify(function (error, success) {
    if (error) {
        console.log('‚ùå SMTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        if (process.env.SENDGRID_API_KEY) {
            console.log('‚úÖ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è SendGrid API');
        } else {
            console.log('‚ö†Ô∏è –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—ã 465/587 —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
            console.log('‚ö†Ô∏è –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ SENDGRID_API_KEY –≤ .env');
        }
    } else {
        console.log('‚úÖ SMTP —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º');
    }
});

// üî• –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationCache = new Map(); // ticketId -> { lastNotificationTime, lastMessageCount }
const NOTIFICATION_COOLDOWN = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
function canSendNotification(ticketId) {
    const now = Date.now();
    const cached = notificationCache.get(ticketId);
    
    if (!cached) {
        // –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        notificationCache.set(ticketId, { lastNotificationTime: now, count: 1 });
        return true;
    }
    
    const timeSinceLastNotif = now - cached.lastNotificationTime;
    
    if (timeSinceLastNotif >= NOTIFICATION_COOLDOWN) {
        // –ü—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        notificationCache.set(ticketId, { lastNotificationTime: now, count: cached.count + 1 });
        return true;
    }
    
    // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log(`‚è∏Ô∏è  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ ${ticketId} –ø—Ä–æ–ø—É—â–µ–Ω–æ (cooldown: ${Math.round(timeSinceLastNotif / 1000)}—Å / ${NOTIFICATION_COOLDOWN / 1000}—Å)`);
    return false;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message, silent = false, replyMarkup = null) {
    try {
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.log('‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
            return false;
        }
        
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        const body = {
            chat_id: TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'HTML', // –í–∫–ª—é—á–∞–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            disable_notification: silent
        };
        
        if (replyMarkup) {
            body.reply_markup = replyMarkup;
        }
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body)
        });
        
        if (response.ok) {
            const data = await response.json();
            if (data.ok) {
                console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                return data.result || true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ true –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            } else {
                console.error('‚ùå Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data.description || 'Unknown error');
                return false;
            }
        } else {
            const errorText = await response.text().catch(() => 'Unknown error');
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', response.status, errorText);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message || error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
async function sendTelegramPhoto(imageUrl, caption, silent = false) {
    try {
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            console.log('‚ö†Ô∏è Telegram —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ');
            return;
        }
        
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto`;
        const fullImageUrl = `https://truststore.ru${imageUrl}`;
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º email –∞–¥—Ä–µ—Å–∞ - —É–±–∏—Ä–∞–µ–º parse_mode –µ—Å–ª–∏ –µ—Å—Ç—å @
        const hasEmail = caption && caption.includes('@');
        const telegramOptions = {
            chat_id: TELEGRAM_CHAT_ID,
            photo: fullImageUrl,
            caption: caption,
            disable_notification: silent
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç email –∞–¥—Ä–µ—Å–æ–≤
        if (!hasEmail) {
            telegramOptions.parse_mode = 'HTML';
        }
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(telegramOptions)
        });
        
        const responseData = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Telegram —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            return responseData;
        } else {
            console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Ñ–æ—Ç–æ:', response.status);
            console.error('   –û—Ç–≤–µ—Ç API:', JSON.stringify(responseData));
            throw new Error(responseData.description || `HTTP ${response.status}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ñ–æ—Ç–æ:', error.message || error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (PDF) –≤ Telegram
async function sendTelegramDocument(documentUrl, caption, silent = false) {
    try {
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`;
        const fullDocumentUrl = `https://truststore.ru${documentUrl}`;
        
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                document: fullDocumentUrl,
                caption: caption,
                parse_mode: 'HTML',
                disable_notification: silent
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ Telegram –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        } else {
            const errorData = await response.json();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', errorData);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    }
}

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true })); // –î–ª—è YooMoney form-data
app.use(cookieParser());
app.use(cors());

// –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ admin.html –î–û —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use((req, res, next) => {
    if (req.path === '/admin.html') {
        return res.status(404).send('Not Found');
    }
    next();
});

// üî• Middleware –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è .html –∏–∑ URL
app.use((req, res, next) => {
    // –ï—Å–ª–∏ URL –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .html - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –≤–µ—Ä—Å–∏—é –±–µ–∑ .html
    if (req.path.endsWith('.html')) {
        const newPath = req.path.slice(0, -5); // –£–±–∏—Ä–∞–µ–º .html
        return res.redirect(301, newPath + (req.url.includes('?') ? req.url.slice(req.url.indexOf('?')) : ''));
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø—É—Ç—å –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ .html –≤–µ—Ä—Å–∏—é
    if (!path.extname(req.path) && req.path !== '/') {
        const htmlPath = path.join(__dirname, req.path + '.html');
        if (fs.existsSync(htmlPath)) {
            return res.sendFile(htmlPath);
        }
    }
    
    // –î–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º main.html
    if (req.path === '/') {
        const mainPath = path.join(__dirname, 'main.html');
        if (fs.existsSync(mainPath)) {
            return res.sendFile(mainPath);
        }
    }
    
    next();
});

app.use(express.static(__dirname)); // –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use('/uploads', express.static(path.join(__dirname, 'uploads'))); // –†–∞–∑–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = path.join(__dirname, 'uploads', 'chat-images');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
function cleanOldFiles() {
    const uploadDir = path.join(__dirname, 'uploads', 'chat-images');
    const sevenDaysAgo = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    if (!fs.existsSync(uploadDir)) {
        return;
    }
    
    fs.readdir(uploadDir, (err, files) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ uploads:', err);
            return;
        }
        
        let deletedCount = 0;
        files.forEach(file => {
            const filePath = path.join(uploadDir, file);
            fs.stat(filePath, (err, stats) => {
                if (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ:', err);
                    return;
                }
                
                // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF)
                if (stats.mtime.getTime() < sevenDaysAgo) {
                    fs.unlink(filePath, (err) => {
                        if (err) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
                        } else {
                            deletedCount++;
                            const fileType = file.toLowerCase().endsWith('.pdf') ? 'PDF' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ ${fileType}: ${file}`);
                        }
                    });
                }
            });
        });
        
        if (deletedCount > 0) {
            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: ${deletedCount}`);
        }
    });
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
cleanOldFiles();

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(cleanOldFiles, 60 * 60 * 1000); // 1 —á–∞—Å

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ email
const emailReplyStorage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = path.join(__dirname, 'uploads', 'email-reply-images');
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + path.extname(file.originalname));
    }
});
const uploadEmailReply = multer({ storage: emailReplyStorage });

const upload = multer({
    storage: storage,
    limits: { fileSize: 20 * 1024 * 1024 }, // 20MB
    fileFilter: function (req, file, cb) {
        console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞:', file.originalname);
        console.log('üìù MIME type:', file.mimetype);
        console.log('üìù Extension:', path.extname(file.originalname).toLowerCase());
        
        // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ MIME —Ç–∏–ø—ã (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è + PDF)
        const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.pdf'];
        const allowedMimeTypes = [
            'image/jpeg',
            'image/jpg', 
            'image/png',
            'image/gif',
            'image/webp',
            'application/pdf'
        ];
        
        const fileExtension = path.extname(file.originalname).toLowerCase();
        const isValidExtension = allowedExtensions.includes(fileExtension);
        const isValidMimeType = allowedMimeTypes.includes(file.mimetype.toLowerCase());
        
        console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ:', isValidExtension);
        console.log('‚úÖ MIME type –≤–∞–ª–∏–¥–µ–Ω:', isValidMimeType);
        
        if (isValidExtension && isValidMimeType) {
            console.log('‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç!');
            return cb(null, true);
        } else {
            console.log('‚ùå –§–∞–π–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω!');
            cb(new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, JPEG, PNG, GIF, WEBP, PDF`));
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
const db = new Database('analytics.db');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.exec(`
    CREATE TABLE IF NOT EXISTS visits (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        session_id TEXT NOT NULL,
        page TEXT NOT NULL,
        ip TEXT,
        user_agent TEXT,
        referrer TEXT,
        device_type TEXT,
        country TEXT,
        country_code TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS sessions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        session_id TEXT UNIQUE NOT NULL,
        ip TEXT,
        user_agent TEXT,
        country TEXT,
        country_code TEXT,
        device_type TEXT,
        first_visit DATETIME DEFAULT CURRENT_TIMESTAMP,
        last_visit DATETIME DEFAULT CURRENT_TIMESTAMP,
        pages_count INTEGER DEFAULT 1
    );

    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id TEXT UNIQUE NOT NULL,
        customer_name TEXT NOT NULL,
        customer_email TEXT NOT NULL,
        customer_phone TEXT,
        products TEXT NOT NULL,
        total_amount REAL NOT NULL,
        payment_method TEXT,
        status TEXT DEFAULT 'pending',
        ip TEXT,
        country TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        category TEXT,
        price REAL NOT NULL,
        description TEXT,
        image TEXT,
        sold_count INTEGER DEFAULT 0,
        status TEXT DEFAULT 'active',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS customers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        name TEXT,
        phone TEXT,
        orders_count INTEGER DEFAULT 0,
        total_spent REAL DEFAULT 0,
        first_order DATETIME,
        last_order DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS support_tickets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticket_id TEXT UNIQUE NOT NULL,
        customer_name TEXT,
        customer_email TEXT,
        status TEXT DEFAULT 'open',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        last_message_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        unread_admin INTEGER DEFAULT 1
    );

    CREATE TABLE IF NOT EXISTS support_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        ticket_id TEXT NOT NULL,
        sender_type TEXT NOT NULL,
        sender_name TEXT,
        message TEXT,
        image_url TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (ticket_id) REFERENCES support_tickets(ticket_id)
    );

    CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS product_suggestions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_name TEXT NOT NULL,
        description TEXT,
        email TEXT,
        status TEXT DEFAULT 'new',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS promo_codes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        code TEXT UNIQUE NOT NULL,
        discount INTEGER NOT NULL,
        max_uses INTEGER NOT NULL,
        current_uses INTEGER DEFAULT 0,
        expires_at DATETIME NOT NULL,
        is_active INTEGER DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS telegram_reviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_user_id INTEGER,
        author_name TEXT NOT NULL,
        review_text TEXT NOT NULL,
        rating INTEGER DEFAULT 5,
        telegram_comment_id INTEGER UNIQUE,
        telegram_date INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS telegram_stats (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        total_comments INTEGER DEFAULT 0,
        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS newsletter_subscribers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        subscribed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        status TEXT DEFAULT 'active'
    );
    
    CREATE TABLE IF NOT EXISTS news (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        date TEXT NOT NULL,
        title TEXT NOT NULL,
        content TEXT NOT NULL,
        image_url TEXT,
        emoji TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        sort_order INTEGER DEFAULT 0
    );
    
    CREATE TABLE IF NOT EXISTS product_inventory (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        product_name TEXT NOT NULL,
        login TEXT NOT NULL,
        password TEXT NOT NULL,
        instructions TEXT,
        status TEXT DEFAULT 'available',
        order_id TEXT,
        sold_at DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS email_messages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        message_id TEXT UNIQUE NOT NULL,
        from_email TEXT NOT NULL,
        from_name TEXT,
        to_email TEXT NOT NULL,
        subject TEXT NOT NULL,
        body_text TEXT,
        body_html TEXT,
        reply_to_message_id TEXT,
        is_read INTEGER DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS email_replies (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        original_message_id INTEGER NOT NULL,
        reply_subject TEXT NOT NULL,
        reply_body TEXT NOT NULL,
        sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (original_message_id) REFERENCES email_messages(id)
    );
    
    CREATE TABLE IF NOT EXISTS email_attachments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email_message_id INTEGER NOT NULL,
        filename TEXT NOT NULL,
        content_type TEXT,
        file_path TEXT NOT NULL,
        file_size INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (email_message_id) REFERENCES email_messages(id)
    );

    CREATE INDEX IF NOT EXISTS idx_session_id ON visits(session_id);
    CREATE INDEX IF NOT EXISTS idx_timestamp ON visits(timestamp);
    CREATE INDEX IF NOT EXISTS idx_country ON visits(country_code);
    CREATE INDEX IF NOT EXISTS idx_order_status ON orders(status);
    CREATE INDEX IF NOT EXISTS idx_customer_email ON customers(email);
    CREATE INDEX IF NOT EXISTS idx_ticket_status ON support_tickets(status);
    CREATE INDEX IF NOT EXISTS idx_ticket_id ON support_messages(ticket_id);
    CREATE INDEX IF NOT EXISTS idx_telegram_comment_id ON telegram_reviews(telegram_comment_id);
    CREATE INDEX IF NOT EXISTS idx_email_message_id ON email_messages(message_id);
    CREATE INDEX IF NOT EXISTS idx_email_from ON email_messages(from_email);
    CREATE INDEX IF NOT EXISTS idx_email_read ON email_messages(is_read);
`);

// –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ image_url –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const tableInfo = db.prepare("PRAGMA table_info(support_messages)").all();
    const hasImageUrl = tableInfo.some(col => col.name === 'image_url');
    
    if (!hasImageUrl) {
        console.log('‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ image_url –≤ support_messages...');
        db.exec('ALTER TABLE support_messages ADD COLUMN image_url TEXT');
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ image_url —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    } else {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ image_url —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
}

// –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ telegram_date –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
try {
    const reviewsTableInfo = db.prepare("PRAGMA table_info(telegram_reviews)").all();
    const hasTelegramDate = reviewsTableInfo.some(col => col.name === 'telegram_date');
    
    if (!hasTelegramDate) {
        console.log('‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ telegram_date –≤ telegram_reviews...');
        db.exec('ALTER TABLE telegram_reviews ADD COLUMN telegram_date INTEGER');
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ telegram_date —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ telegram_date:', error.message);
}

// –ú–∏–≥—Ä–∞—Ü–∏—è 4: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É status –≤ orders
try {
    const ordersTableInfo = db.pragma('table_info(orders)');
    const hasStatus = ordersTableInfo.some(col => col.name === 'status');
    
    if (!hasStatus) {
        console.log('‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ status –≤ orders...');
        db.exec('ALTER TABLE orders ADD COLUMN status TEXT DEFAULT "pending"');
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ status —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–∞–∑—ã (—Å—á–∏—Ç–∞–µ–º –∏—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏)
        const existingOrders = db.prepare('SELECT COUNT(*) as count FROM orders').get();
        if (existingOrders.count > 0) {
            db.exec('UPDATE orders SET status = "paid" WHERE status IS NULL');
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${existingOrders.count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤`);
        }
    } else {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ status —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ status:', error.message);
}

// –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ (username: t1xxas, password: Gaga00723)
const checkAdmin = db.prepare('SELECT * FROM admins WHERE username = ?').get('t1xxas');
if (!checkAdmin) {
    const hashedPassword = bcrypt.hashSync('Gaga00723', 10);
    db.prepare('INSERT INTO admins (username, password) VALUES (?, ?)').run('t1xxas', hashedPassword);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–¥–º–∏–Ω: t1xxas / Gaga00723');
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
const productsCount = db.prepare('SELECT COUNT(*) as count FROM products').get();
if (productsCount.count === 0) {
    const products = [
        { name: 'ChatGPT Plus', category: 'AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', price: 2250, image: 'chatgpt.png', description: '–î–æ—Å—Ç—É–ø –∫ ChatGPT Plus –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'Midjourney Pro', category: 'AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', price: 3500, image: 'midjourney.png', description: '–ü–æ–¥–ø–∏—Å–∫–∞ Midjourney Pro –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'Claude AI Pro', category: 'AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', price: 2050, image: 'claude.png', description: 'Claude AI Pro –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'YouTube Premium', category: '–í–∏–¥–µ–æ', price: 249, image: 'youtube.png', description: 'YouTube Premium + Music –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'VPN Premium', category: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', price: 315, image: 'vpn.png', description: '–õ–∏—á–Ω—ã–π VPN –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'Adobe Creative Cloud', category: '–î–∏–∑–∞–π–Ω', price: 4200, image: 'adobe.png', description: 'Adobe Creative Cloud All Apps' },
        { name: 'CapCut Pro', category: '–ú–æ–Ω—Ç–∞–∂', price: 1890, image: 'capcut.png', description: 'CapCut Pro –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'Cursor AI', category: 'AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', price: 1850, image: 'cursor.png', description: 'Cursor AI Pro –Ω–∞ 1 –º–µ—Å—è—Ü' },
        { name: 'Google Gemini', category: 'AI –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', price: 1750, image: 'gemini.png', description: 'Google Gemini + Veo 3' }
    ];
    
    const stmt = db.prepare('INSERT INTO products (name, category, price, image, description) VALUES (?, ?, ?, ?, ?)');
    products.forEach(p => stmt.run(p.name, p.category, p.price, p.image, p.description));
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', products.length);
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT
const authMiddleware = (req, res, next) => {
    const token = req.cookies.token;
    
    console.log('\n========== AUTH CHECK ==========');
    console.log('üìç Path:', req.path);
    console.log('üåê Host:', req.headers.host);
    console.log('üîí Protocol:', req.protocol);
    console.log('üç™ All Cookies:', JSON.stringify(req.cookies));
    console.log('üç™ Cookie Header:', req.headers.cookie);
    console.log('üîë Token found:', token ? '–î–ê' : '–ù–ï–¢');
    console.log('================================\n');
    
    if (!token) {
        console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ cookies');
        return res.status(401).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.userId = decoded.id;
        console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', decoded.id);
        next();
    } catch (error) {
        console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω:', error.message);
        return res.status(401).json({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
};

// API Routes

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
function getOrCreateSession(ip, userAgent) {
    const crypto = require('crypto');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    const isMobile = /mobile|android|iphone|ipad|tablet/i.test(userAgent);
    const deviceType = isMobile ? 'Mobile' : 'Desktop';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω—É –ø–æ IP
    const cleanIp = ip.replace('::ffff:', '');
    const geo = geoip.lookup(cleanIp);
    const country = geo ? getCountryName(geo.country) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const countryCode = geo ? geo.country : 'XX';
    
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç)
    const existingSession = db.prepare(`
        SELECT * FROM sessions 
        WHERE ip = ? AND user_agent = ? 
        AND datetime(last_visit) >= datetime('now', '-30 minutes')
        ORDER BY last_visit DESC
        LIMIT 1
    `).get(ip, userAgent);
    
    if (existingSession) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        db.prepare(`
            UPDATE sessions 
            SET last_visit = CURRENT_TIMESTAMP, pages_count = pages_count + 1
            WHERE session_id = ?
        `).run(existingSession.session_id);
        
        return {
            sessionId: existingSession.session_id,
            deviceType,
            country,
            countryCode
        };
    } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        const sessionId = crypto.randomBytes(16).toString('hex');
        
        db.prepare(`
            INSERT INTO sessions (session_id, ip, user_agent, country, country_code, device_type)
            VALUES (?, ?, ?, ?, ?, ?)
        `).run(sessionId, ip, userAgent, country, countryCode, deviceType);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑–∑–≤—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ
        const notificationText = `üë§ –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å\n\n` +
            `${country}\n` +
            `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceType}\n` +
            `üåê IP: ${cleanIp}`;
        
        sendTelegramNotification(notificationText, true); // silent = true
        
        return {
            sessionId,
            deviceType,
            country,
            countryCode
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
function getCountryName(code) {
    const countries = {
        'RU': 'üá∑üá∫ –†–æ—Å—Å–∏—è',
        'UA': 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞',
        'BY': 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å',
        'KZ': 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        'US': 'üá∫üá∏ –°–®–ê',
        'DE': 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è',
        'GB': 'üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
        'FR': 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è',
        'TR': 'üáπüá∑ –¢—É—Ä—Ü–∏—è',
        'CN': 'üá®üá≥ –ö–∏—Ç–∞–π',
        'JP': 'üáØüáµ –Ø–ø–æ–Ω–∏—è',
        'IN': 'üáÆüá≥ –ò–Ω–¥–∏—è',
        'BR': 'üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è',
        'CA': 'üá®üá¶ –ö–∞–Ω–∞–¥–∞',
        'AU': 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è',
        'IT': 'üáÆüáπ –ò—Ç–∞–ª–∏—è',
        'ES': 'üá™üá∏ –ò—Å–ø–∞–Ω–∏—è',
        'PL': 'üáµüá± –ü–æ–ª—å—à–∞',
        'NL': 'üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã',
        'SE': 'üá∏üá™ –®–≤–µ—Ü–∏—è'
    };
    return countries[code] || `üåç ${code}`;
}

// –¢—Ä–µ–∫–∏–Ω–≥ –ø–æ—Å–µ—â–µ–Ω–∏–π
app.post('/api/track', (req, res) => {
    try {
        const { page, referrer } = req.body;
        const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        const userAgent = req.headers['user-agent'];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        const { sessionId, deviceType, country, countryCode } = getOrCreateSession(ip, userAgent);

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const stmt = db.prepare(`
            INSERT INTO visits (session_id, page, ip, user_agent, referrer, device_type, country, country_code) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `);
        stmt.run(sessionId, page, ip, userAgent, referrer, deviceType, country, countryCode);

        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/login', (req, res) => {
    try {
        const { username, password } = req.body;

        const admin = db.prepare('SELECT * FROM admins WHERE username = ?').get(username);
        
        if (!admin || !bcrypt.compareSync(password, admin.password)) {
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const token = jwt.sign({ id: admin.id }, JWT_SECRET, { expiresIn: '30d' });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ cookie –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ nginx proxy —Å HTTPS
        const cookieOptions = {
            httpOnly: true, // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - —Ç–æ–ª—å–∫–æ HTTP
            secure: true, // –í–ê–ñ–ù–û! true –¥–ª—è HTTPS
            sameSite: 'none', // –î–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ proxy
            maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
            path: '/' // Cookie –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—Å–µ—Ö –ø—É—Ç—è—Ö
        };
        
        res.cookie('token', token, cookieOptions);
        
        console.log('üç™ Cookie —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', JSON.stringify(cookieOptions));
        console.log('üåê Host:', req.headers.host);
        console.log('üîí Protocol:', req.protocol);
        console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));

        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', username);
        res.json({ success: true, message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—ã—Ö–æ–¥
app.post('/api/logout', (req, res) => {
    res.clearCookie('token');
    res.json({ success: true });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/api/check-auth', authMiddleware, (req, res) => {
    res.json({ authenticated: true });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Å—Ç–∞—Ä–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏)
app.get('/api/stats', authMiddleware, (req, res) => {
    try {
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—á–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏–∏
        const totalSessions = db.prepare('SELECT COUNT(*) as count FROM sessions').get();
        const uniqueIPs = db.prepare('SELECT COUNT(DISTINCT ip) as count FROM sessions').get();
        
        // –ü–æ—Å–µ—â–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        const pageViews = db.prepare(`
            SELECT page, COUNT(DISTINCT session_id) as count 
            FROM visits 
            GROUP BY page 
            ORDER BY count DESC
        `).all();

        // –°–µ—Å—Å–∏–∏ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        const dailyVisits = db.prepare(`
            SELECT DATE(first_visit) as date, COUNT(*) as count 
            FROM sessions 
            WHERE first_visit >= datetime('now', '-7 days')
            GROUP BY DATE(first_visit)
            ORDER BY date
        `).all();

        // –ü–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const deviceStats = db.prepare(`
            SELECT device_type, COUNT(*) as count 
            FROM sessions 
            GROUP BY device_type
        `).all();

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è
        const recentVisits = db.prepare(`
            SELECT v.page, v.ip, v.device_type, v.timestamp, v.country 
            FROM visits v
            ORDER BY v.timestamp DESC 
            LIMIT 20
        `).all();

        res.json({
            total: totalSessions.count,
            unique: uniqueIPs.count,
            pageViews,
            dailyVisits,
            deviceStats,
            recentVisits
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
app.post('/api/support/upload-image', (req, res) => {
    console.log('üì§ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞');
    upload.single('image')(req, res, (err) => {
        try {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ multer (–∫–ª–∏–µ–Ω—Ç):', err);
                return res.status(400).json({ error: err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
            }
            
            if (!req.file) {
                console.error('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞');
                return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
            }
            
            const imageUrl = `/uploads/chat-images/${req.file.filename}`;
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º:', imageUrl);
            console.log('üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', req.file.size, '–±–∞–π—Ç');
            res.json({ success: true, imageUrl });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });
});

// API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ (–±–µ–∑ authMiddleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ proxy)
app.post('/api/admin/support/upload-image', (req, res) => {
    console.log('üì§ –ó–∞–ø—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞');
    upload.single('image')(req, res, (err) => {
        try {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ multer:', err);
                return res.status(400).json({ error: err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
            }
            
            if (!req.file) {
                console.error('‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
                return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
            }
            
            const imageUrl = `/uploads/chat-images/${req.file.filename}`;
            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º:', imageUrl);
            console.log('üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', req.file.size, '–±–∞–π—Ç');
            res.json({ success: true, imageUrl });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    });
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞/–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
app.post('/api/support/send-message', (req, res) => {
    try {
        const { ticketId, customerName, customerEmail, message, imageUrl } = req.body;
        
        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', { ticketId, customerName, message, imageUrl });
        
        if (!message && !imageUrl) {
            return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        let finalTicketId = ticketId;
        let isNewTicket = false;
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å ticketId, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤ –±–∞–∑–µ
        if (ticketId) {
            const existingTicket = db.prepare('SELECT * FROM support_tickets WHERE ticket_id = ?').get(ticketId);
            
            if (!existingTicket) {
                console.log('‚ö†Ô∏è –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', ticketId, '‚Üí –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
                finalTicketId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç ticketId –∏–ª–∏ —Ç–∏–∫–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        if (!finalTicketId) {
            finalTicketId = 'TKT-' + Date.now();
            isNewTicket = true;
            
            db.prepare(`
                INSERT INTO support_tickets (ticket_id, customer_name, customer_email, unread_admin)
                VALUES (?, ?, ?, 1)
            `).run(finalTicketId, customerName || '–ì–æ—Å—Ç—å', customerEmail || null);
            
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç:', finalTicketId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏)
            if (canSendNotification(finalTicketId)) {
                if (imageUrl) {
                    const caption = `üÜï <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç!</b>\n\n` +
                        `üìã ID: <code>${finalTicketId}</code>\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerName || '–ì–æ—Å—Ç—å'}\n` +
                        `${customerEmail ? `üìß Email: ${customerEmail}\n` : ''}` +
                        `${message ? `üí¨ ${message}\n` : ''}` +
                        `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
                    
                    const isPDF = imageUrl.toLowerCase().endsWith('.pdf');
                    if (isPDF) {
                        sendTelegramDocument(imageUrl, caption);
                    } else {
                        sendTelegramPhoto(imageUrl, caption);
                    }
                } else {
                    const notificationText = `üÜï <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç!</b>\n\n` +
                        `üìã ID: <code>${finalTicketId}</code>\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerName || '–ì–æ—Å—Ç—å'}\n` +
                        `${customerEmail ? `üìß Email: ${customerEmail}\n` : ''}` +
                        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n\n` +
                        `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
                    
                    sendTelegramNotification(notificationText);
                }
            }
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if (!isNewTicket) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            db.prepare(`
                UPDATE support_tickets 
                SET last_message_at = CURRENT_TIMESTAMP, unread_admin = 1
                WHERE ticket_id = ?
            `).run(finalTicketId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏)
            if (canSendNotification(finalTicketId)) {
                if (imageUrl) {
                    const caption = `üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n` +
                        `üìã –¢–∏–∫–µ—Ç: <code>${finalTicketId}</code>\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerName || '–ì–æ—Å—Ç—å'}\n` +
                        `${message ? `üí¨ ${message}\n` : ''}` +
                        `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
                    
                    const isPDF = imageUrl.toLowerCase().endsWith('.pdf');
                    if (isPDF) {
                        sendTelegramDocument(imageUrl, caption);
                    } else {
                        sendTelegramPhoto(imageUrl, caption);
                    }
                } else {
                    const notificationText = `üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n` +
                        `üìã –¢–∏–∫–µ—Ç: <code>${finalTicketId}</code>\n` +
                        `üë§ –ö–ª–∏–µ–Ω—Ç: ${customerName || '–ì–æ—Å—Ç—å'}\n` +
                        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}\n\n` +
                        `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
                    
                    sendTelegramNotification(notificationText);
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageResult = db.prepare(`
            INSERT INTO support_messages (ticket_id, sender_type, sender_name, message, image_url)
            VALUES (?, 'customer', ?, ?, ?)
        `).run(finalTicketId, customerName || '–ì–æ—Å—Ç—å', message || null, imageUrl || null);
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, ID:', messageResult.lastInsertRowid);
        
        res.json({ success: true, ticketId: finalTicketId, messageId: messageResult.lastInsertRowid });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
app.get('/api/support/messages/:ticketId', (req, res) => {
    try {
        const { ticketId } = req.params;
        
        const messages = db.prepare(`
            SELECT * FROM support_messages
            WHERE ticket_id = ?
            ORDER BY created_at ASC
        `).all(ticketId);
        
        res.json({ messages });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ç–æ–≤
app.get('/api/admin/support/tickets', authMiddleware, (req, res) => {
    try {
        const tickets = db.prepare(`
            SELECT t.*, 
                   (SELECT COUNT(*) FROM support_messages WHERE ticket_id = t.ticket_id) as messages_count,
                   (SELECT message FROM support_messages WHERE ticket_id = t.ticket_id ORDER BY created_at DESC LIMIT 1) as last_message
            FROM support_tickets t
            ORDER BY t.last_message_at DESC
        `).all();
        
        res.json({ tickets });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
app.get('/api/admin/support/ticket/:ticketId', authMiddleware, (req, res) => {
    try {
        const { ticketId } = req.params;
        
        console.log('üìã –ó–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ç–∞:', ticketId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const ticket = db.prepare(`
            SELECT * FROM support_tickets WHERE ticket_id = ?
        `).get(ticketId);
        
        if (!ticket) {
            console.log('‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', ticketId);
            return res.status(404).json({ error: '–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        console.log('‚úÖ –¢–∏–∫–µ—Ç –Ω–∞–π–¥–µ–Ω:', ticket);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messages = db.prepare(`
            SELECT * FROM support_messages
            WHERE ticket_id = ?
            ORDER BY created_at ASC
        `).all(ticketId);
        
        console.log('üí¨ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messages.length);
        console.log('üìù –°–æ–æ–±—â–µ–Ω–∏—è:', messages);
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–æ–º
        db.prepare(`
            UPDATE support_tickets 
            SET unread_admin = 0
            WHERE ticket_id = ?
        `).run(ticketId);
        
        res.json({ ticket, messages });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
app.post('/api/admin/support/reply', authMiddleware, (req, res) => {
    try {
        const { ticketId, message, imageUrl } = req.body;
        
        console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞:', { ticketId, message, imageUrl });
        
        if ((!message && !imageUrl) || !ticketId) {
            console.log('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return res.status(400).json({ error: '–¢–∏–∫–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
        const result = db.prepare(`
            INSERT INTO support_messages (ticket_id, sender_type, sender_name, message, image_url)
            VALUES (?, 'admin', '–ê—Ä—Ç—ë–º', ?, ?)
        `).run(ticketId, message || null, imageUrl || null);
        
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î, ID:', result.lastInsertRowid);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        db.prepare(`
            UPDATE support_tickets 
            SET last_message_at = CURRENT_TIMESTAMP
            WHERE ticket_id = ?
        `).run(ticketId);
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        res.json({ success: true, messageId: result.lastInsertRowid });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
app.post('/api/admin/support/close/:ticketId', authMiddleware, (req, res) => {
    try {
        const { ticketId } = req.params;
        
        db.prepare(`
            UPDATE support_tickets 
            SET status = 'closed'
            WHERE ticket_id = ?
        `).run(ticketId);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
app.post('/api/admin/support/open/:ticketId', authMiddleware, (req, res) => {
    try {
        const { ticketId } = req.params;
        
        db.prepare(`
            UPDATE support_tickets 
            SET status = 'open', unread_admin = 1
            WHERE ticket_id = ?
        `).run(ticketId);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/api/admin/support/system-message', authMiddleware, (req, res) => {
    try {
        const { ticketId, message } = req.body;
        
        if (!message || !ticketId) {
            return res.status(400).json({ error: '–¢–∏–∫–µ—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.prepare(`
            INSERT INTO support_messages (ticket_id, sender_type, sender_name, message)
            VALUES (?, 'system', '–°–∏—Å—Ç–µ–º–∞', ?)
        `).run(ticketId, message);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        db.prepare(`
            UPDATE support_tickets 
            SET last_message_at = CURRENT_TIMESTAMP
            WHERE ticket_id = ?
        `).run(ticketId);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
app.post('/api/create-order', (req, res) => {
    try {
        console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞...');
        const { customerName, customerEmail, customerPhone, products, totalAmount, paymentMethod } = req.body;
        console.log('   –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:', {
            customerName,
            customerEmail,
            customerPhone: customerPhone ? '—É–∫–∞–∑–∞–Ω' : '–Ω–µ —É–∫–∞–∑–∞–Ω',
            productsCount: Array.isArray(products) ? products.length : '–Ω–µ –º–∞—Å—Å–∏–≤',
            totalAmount,
            paymentMethod
        });
        
        const ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
        const cleanIp = ip.replace('::ffff:', '');
        const geo = geoip.lookup(cleanIp);
        const country = geo ? getCountryName(geo.country) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–∫–∞–∑–∞
        const orderId = 'ORD-' + Date.now();
        console.log('   üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω orderId:', orderId);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const insertResult = db.prepare(`
            INSERT INTO orders (order_id, customer_name, customer_email, customer_phone, products, total_amount, payment_method, ip, country)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        `).run(orderId, customerName, customerEmail, customerPhone, JSON.stringify(products), totalAmount, paymentMethod || 'YooMoney', ip, country);
        
        console.log('   ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –≤ –ë–î:', {
            orderId,
            insertedId: insertResult.lastInsertRowid,
            changes: insertResult.changes
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ë–î
        const checkOrder = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(orderId);
        if (checkOrder) {
            console.log('   ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –∑–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, —Å—Ç–∞—Ç—É—Å:', checkOrder.status);
        } else {
            console.error('   ‚ùå –û–®–ò–ë–ö–ê: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è!');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        const existingCustomer = db.prepare('SELECT * FROM customers WHERE email = ?').get(customerEmail);
        if (existingCustomer) {
            db.prepare(`
                UPDATE customers 
                SET name = ?, phone = ?, orders_count = orders_count + 1, 
                    total_spent = total_spent + ?, last_order = CURRENT_TIMESTAMP
                WHERE email = ?
            `).run(customerName, customerPhone, totalAmount, customerEmail);
            console.log('   ‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', customerEmail);
        } else {
            db.prepare(`
                INSERT INTO customers (email, name, phone, orders_count, total_spent, first_order, last_order)
                VALUES (?, ?, ?, 1, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            `).run(customerEmail, customerName, customerPhone, totalAmount);
            console.log('   ‚úÖ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', customerEmail);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        const productsList = typeof products === 'string' ? JSON.parse(products) : products;
        productsList.forEach(product => {
            db.prepare('UPDATE products SET sold_count = sold_count + ? WHERE name = ?')
                .run(product.quantity || 1, product.name);
        });
        console.log('   ‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è', productsList.length, '—Ç–æ–≤–∞—Ä–æ–≤');
        
        console.log('   üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', orderId);
        res.json({ success: true, orderId });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        console.error('   Stack:', error.stack);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ==================== HELEKET PAYMENT ====================

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Heleket (–∫–∞–∫ bot-t: POST /v1/payment)
app.post('/api/payment/heleket/create', async (req, res) => {
    try {
        const { orderId, amount, currency = 'RUB', description, customerEmail, successUrl, cancelUrl } = req.body;
        
        if (!HELEKET_API_KEY || !HELEKET_MERCHANT_ID) {
            return res.status(500).json({ error: 'Heleket –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ HELEKET_API_KEY –∏ HELEKET_MERCHANT_ID –≤ .env' });
        }
        
        if (!orderId || !amount) {
            return res.status(400).json({ error: 'orderId –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        const rubAmount = parseFloat(amount);
        let finalAmount = rubAmount;
        let finalCurrency = currency;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RUB –≤ USD –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É Google
        if (currency === 'RUB') {
            try {
                const usdAmount = await convertRUBtoUSD(rubAmount);
                finalAmount = usdAmount;
                finalCurrency = 'USD';
                console.log(`üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: ${rubAmount} RUB ‚Üí ${usdAmount} USD (–∫—É—Ä—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 24/7)`);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã:', error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å RUB, –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Heleket API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å—å—é (MD5)
        // –§–æ—Ä–º–∞—Ç: POST https://api.heleket.com/v1/payment
        // –ü–æ–¥–ø–∏—Å—å: sign = md5(base64_encode(JSON_BODY) + API_KEY)
        const host = req.get('host');
        const protocol = req.protocol;
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        const bodyObj = {
            amount: String(finalAmount),
            currency: finalCurrency,
            order_id: orderId
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ URL
        if (successUrl) bodyObj.url_success = successUrl;
        else bodyObj.url_success = `${protocol}://${host}/success`;
        
        if (cancelUrl) bodyObj.url_return = cancelUrl;
        else bodyObj.url_return = `${protocol}://${host}/checkout`;
        
        bodyObj.url_callback = `${protocol}://${host}/api/payment/heleket`;
        
        const jsonBody = JSON.stringify(bodyObj);
        const base64Body = Buffer.from(jsonBody, 'utf8').toString('base64');
        // –ü–æ–¥–ø–∏—Å—å: sign = md5(base64_encode(JSON_BODY) + API_KEY)
        const sign = crypto.createHash('md5').update(base64Body + HELEKET_API_KEY).digest('hex');
        
        console.log('üì§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ Heleket:', {
            url: 'https://api.heleket.com/v1/payment',
            merchant: HELEKET_MERCHANT_ID,
            body: bodyObj,
            sign: sign.substring(0, 10) + '...' // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∏
        });
        
        const response = await fetch('https://api.heleket.com/v1/payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'merchant': HELEKET_MERCHANT_ID,
                'sign': sign
            },
            body: jsonBody
        });
        
        const responseText = await response.text();
        let data;
        
        try {
            data = JSON.parse(responseText);
        } catch (error) {
            console.error('‚ùå Heleket –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:', responseText);
            throw new Error(`Heleket response not JSON: status=${response.status} body=${responseText.substring(0, 200)}`);
        }
        
        console.log('üì• –û—Ç–≤–µ—Ç Heleket:', {
            status: response.status,
            state: data.state,
            hasResult: !!data.result
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç: state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0 –¥–ª—è —É—Å–ø–µ—Ö–∞
        if (!response.ok || data.state !== 0) {
            console.error('‚ùå –û—à–∏–±–∫–∞ Heleket:', {
                status: response.status,
                state: data.state,
                message: data.message || data.error || 'Unknown error',
                fullResponse: data
            });
            throw new Error(data.message || data.error || `Heleket error: state=${data.state}, status=${response.status}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ result.url
        if (!data.result || !data.result.url) {
            console.error('‚ùå Heleket –Ω–µ –≤–µ—Ä–Ω—É–ª result.url:', data);
            throw new Error(`Heleket: result.url missing in response`);
        }
        
        const paymentUrl = data.result.url;
        const invoiceId = data.result.id || orderId;
        
        console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω, URL:', paymentUrl);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
        const responseData = {
            success: true,
            payment_id: invoiceId,
            payment_url: paymentUrl,
            order_id: orderId
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        if (currency === 'RUB' && finalCurrency === 'USD') {
            const rate = await getUSDRate();
            responseData.conversion = {
                original_amount: rubAmount,
                original_currency: 'RUB',
                converted_amount: finalAmount,
                converted_currency: 'USD',
                exchange_rate: rate,
                rate_source: 'Yahoo Finance (Apple Finance) - –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è 24/7'
            };
        }
        
        res.json(responseData);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ Heleket:', error);
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞';
        let errorDetails = {};
        
        if (error.type === 'invalid-json') {
            errorMessage = 'Heleket API –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö';
            errorDetails = {
                hint: '–í–æ–∑–º–æ–∂–Ω–æ, API endpoint –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞',
                api_url: HELEKET_API_URL
            };
        } else if (error.message) {
            errorMessage = error.message;
            errorDetails = { original_error: error.message };
        }
        
        res.status(500).json({ 
            error: errorMessage,
            message: errorDetails.hint || '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Heleket API',
            details: errorDetails
        });
    }
});

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–û–í ====================

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendOrderEmailWithRetry(emailData, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`   üìß –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –æ—Ç–ø—Ä–∞–≤–∫–∏ email...`);
            const result = await sendOrderEmail(emailData);
            
            if (result && result.success) {
                console.log(`   ‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt}`);
                return { success: true, attempt };
            } else {
                console.error(`   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, result?.error || 'Unknown error');
                if (attempt < maxRetries) {
                    await new Promise(resolve => setTimeout(resolve, 2000 * attempt)); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                }
            }
        } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error.message);
            if (attempt < maxRetries) {
                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
            }
        }
    }
    
    return { success: false, error: '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∏—Å—á–µ—Ä–ø–∞–Ω—ã' };
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendTelegramWithRetry(message, maxRetries = 3) {
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`   üì± –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram...`);
            const result = await sendTelegramNotification(message, false);
            
            if (result === true) {
                console.log(`   ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt}`);
                return true;
            } else {
                console.error(`   ‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å`);
                if (attempt < maxRetries) {
                    await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
                }
            }
        } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error.message);
            if (attempt < maxRetries) {
                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
            }
        }
    }
    
    console.error('   ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
    return false;
}

// ==================== YOOMONEY PAYMENT WEBHOOK (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù) ====================

app.post('/api/payment/yoomoney', async (req, res) => {
    const startTime = Date.now();
    let orderProcessed = false;
    
    try {
        console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üì• YOOMONEY WEBHOOK –ü–û–õ–£–ß–ï–ù');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
        console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());
        console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));
        console.log('üì¶ Body:', JSON.stringify(req.body, null, 2));
        
        const {
            notification_type,
            operation_id,
            amount,
            currency,
            datetime,
            sender,
            codepro,
            label,
            sha1_hash
        } = req.body;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!label || !amount || !notification_type) {
            console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ webhook');
            return res.status(400).send('Missing required fields');
        }
        
        console.log('\nüìã –î–∞–Ω–Ω—ã–µ YooMoney:');
        console.log('   notification_type:', notification_type);
        console.log('   operation_id:', operation_id);
        console.log('   amount:', amount);
        console.log('   currency:', currency);
        console.log('   label (order_id):', label);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (notification_type !== 'p2p-incoming' && notification_type !== 'card-incoming') {
            console.log('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø:', notification_type);
            return res.status(200).send('OK'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        if (YOOMONEY_SECRET && sha1_hash) {
            const string = `${notification_type}&${operation_id}&${amount}&${currency}&${datetime}&${sender}&${codepro}&${YOOMONEY_SECRET}&${label}`;
            const hash = crypto.createHash('sha1').update(string).digest('hex');
            
            if (hash !== sha1_hash) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å!');
                // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 400, –Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                console.log('‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏)');
            } else {
                console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
            }
        }
        
        // –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞
        const order = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(label);
        
        if (!order) {
            console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', label);
            return res.status(404).send('Order not found');
        }
        
        console.log('\nüì¶ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑:');
        console.log('   ID:', order.order_id);
        console.log('   –ö–ª–∏–µ–Ω—Ç:', order.customer_name);
        console.log('   Email:', order.customer_email);
        console.log('   –°—Ç–∞—Ç—É—Å:', order.status);
        console.log('   –°—É–º–º–∞:', order.total_amount);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑
        if (order.status === 'paid') {
            console.log('‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return res.status(200).send('OK');
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ 10%)
        const orderAmount = parseFloat(order.total_amount);
        const paymentAmount = parseFloat(amount);
        const minAmount = orderAmount * 0.90; // –î–æ–ø—É—Å–∫–∞–µ–º –¥–æ 10% —Ä–∞–∑–Ω–∏—Ü—ã –∏–∑-–∑–∞ –∫–æ–º–∏—Å—Å–∏–π
        
        if (paymentAmount < minAmount) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', paymentAmount, '–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º:', minAmount.toFixed(2), '(—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π –¥–æ 10%)');
            return res.status(400).send('Wrong amount');
        }
        
        if (paymentAmount < orderAmount) {
            const difference = orderAmount - paymentAmount;
            console.log(`‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –º–µ–Ω—å—à–µ –Ω–∞ ${difference.toFixed(2)} ‚ÇΩ (–∫–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)`);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        console.log('\nüí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ "paid"...');
        const updateResult = db.prepare('UPDATE orders SET status = ? WHERE order_id = ?').run('paid', label);
        
        if (updateResult.changes === 0) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞!');
            return res.status(500).send('Failed to update order');
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω (–∏–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫:', updateResult.changes, ')');
        orderProcessed = true;
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        const products = JSON.parse(order.products || '[]');
        console.log('\nüì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:', products.length);
        
        // –û–¢–ü–†–ê–í–ö–ê EMAILS –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
        console.log('\nüìß –û–¢–ü–†–ê–í–ö–ê EMAILS –ö–õ–ò–ï–ù–¢–£ (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)...\n');
        let emailsSent = 0;
        let emailsFailed = 0;
        
        for (const product of products) {
            const quantity = product.quantity || 1;
            const productName = product.name || product.productName || product.product_name;
            
            console.log(`\nüì¶ –¢–æ–≤–∞—Ä: "${productName}" (x${quantity})`);
            
            // –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
            let productInfo = db.prepare('SELECT * FROM products WHERE name = ?').get(productName);
            if (!productInfo) {
                const baseName = productName.split('(')[0].split('-')[0].split('|')[0].split('[')[0].trim();
                productInfo = db.prepare('SELECT * FROM products WHERE name LIKE ?').get(baseName + '%');
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for (let i = 0; i < quantity; i++) {
                const emailData = {
                    to: order.customer_email,
                    orderNumber: label,
                    productName: productName,
                    productImage: productInfo ? productInfo.image : (product.image || null),
                    productCategory: productInfo ? productInfo.category : null,
                    productDescription: productInfo ? productInfo.description : null,
                    login: null,
                    password: null,
                    instructions: productInfo ? productInfo.description : '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.'
                };
                
                const emailResult = await sendOrderEmailWithRetry(emailData, 3);
                
                if (emailResult.success) {
                    emailsSent++;
                    console.log(`   ‚úÖ Email ${i + 1}/${quantity} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
                } else {
                    emailsFailed++;
                    console.error(`   ‚ùå Email ${i + 1}/${quantity} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫`);
                }
            }
        }
        
        console.log(`\nüìä –ò–¢–û–ì–û EMAILS: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent}, –æ—à–∏–±–æ–∫ ${emailsFailed}`);
        
        // –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
        console.log('\nüì± –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)...\n');
        
        const telegramMessage = `üí∞ <b>–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ YOOMONEY!</b>\n\n` +
            `üÜî –ó–∞–∫–∞–∑: <code>${label}</code>\n` +
            `üí≥ –û–ø–µ—Ä–∞—Ü–∏—è: <code>${operation_id}</code>\n` +
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customer_name}\n` +
            `üìß Email: ${order.customer_email}\n` +
            `üíµ –°—É–º–º–∞: ${amount} ${currency}\n` +
            `üì¶ –¢–æ–≤–∞—Ä—ã: ${products.map(p => p.name || p.productName || p.product_name).join(', ')}\n` +
            `üìÖ –î–∞—Ç–∞: ${datetime || new Date().toISOString()}\n\n` +
            `üìä Emails: ‚úÖ ${emailsSent} | ‚ùå ${emailsFailed}\n\n` +
            `üîó <a href="https://truststore.ru/admin.html">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
        
        const telegramSent = await sendTelegramWithRetry(telegramMessage, 3);
        
        if (telegramSent) {
            console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
            console.error('‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }
        
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        console.log(`\n‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ ${duration} —Å–µ–∫`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
        
        // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        res.status(200).send('OK');
        
    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK:');
        console.error('   –û—à–∏–±–∫–∞:', error.message);
        console.error('   Stack:', error.stack);
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (orderProcessed) {
            try {
                await sendTelegramNotification(
                    `‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ó–ê–ö–ê–ó–ê!</b>\n\n` +
                    `–ó–∞–∫–∞–∑: ${req.body?.label || 'unknown'}\n` +
                    `–û—à–∏–±–∫–∞: ${error.message}\n\n` +
                    `–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑ –≤—Ä—É—á–Ω—É—é!`,
                    false
                );
            } catch (telegramError) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', telegramError);
            }
        }
        
        res.status(500).send('Server error');
    }
});

// ==================== HELEKET PAYMENT WEBHOOK (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù) ====================

app.post('/api/payment/heleket', async (req, res) => {
    const startTime = Date.now();
    let orderProcessed = false;
    
    try {
        console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        console.log('üì• HELEKET WEBHOOK –ü–û–õ–£–ß–ï–ù');
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
        console.log('‚è∞ –í—Ä–µ–º—è:', new Date().toISOString());
        console.log('üìã Headers:', JSON.stringify(req.headers, null, 2));
        console.log('üì¶ Body:', JSON.stringify(req.body, null, 2));
        
        // Heleket –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        const body = req.body;
        const event = body.event || body.type || body.status;
        const payment_id = body.payment_id || body.id || body.paymentId || body.invoice_id || body.invoiceId;
        const order_id = body.order_id || body.orderId || body.order || body.label;
        const amount = body.amount || body.sum || body.total;
        const currency = body.currency || 'RUB';
        const status = body.status || body.state || body.payment_status;
        const signature = body.signature || body.sign || body.hash;
        const customer_email = body.customer_email || body.email || body.customerEmail;
        
        console.log('üìã –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö:');
        console.log('   event:', event);
        console.log('   payment_id:', payment_id);
        console.log('   order_id:', order_id);
        console.log('   amount:', amount);
        console.log('   currency:', currency);
        console.log('   status:', status);
        console.log('   signature:', signature ? signature.substring(0, 10) + '...' : '–Ω–µ—Ç');
        console.log('   customer_email:', customer_email);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
        if (HELEKET_WEBHOOK_SECRET && signature) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            const payloadString = JSON.stringify(req.body);
            const expectedSignature = crypto
                .createHmac('sha256', HELEKET_WEBHOOK_SECRET)
                .update(payloadString)
                .digest('hex');
            
            if (signature !== expectedSignature) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –æ—Ç Heleket!');
                console.error('   –û–∂–∏–¥–∞–ª–æ—Å—å:', expectedSignature.substring(0, 20) + '...');
                console.error('   –ü–æ–ª—É—á–µ–Ω–æ:', signature.substring(0, 20) + '...');
                return res.status(400).send('Invalid signature');
            }
            console.log('‚úÖ –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
        } else {
            console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç HELEKET_WEBHOOK_SECRET –∏–ª–∏ signature)');
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –§–ò–ù–ê–õ–¨–ù–´–ï –∏ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        const isPaid = (
            (status === 'paid' || 
            status === 'completed' || 
            status === 'success' ||
            status === 'successful' ||
            event === 'payment.succeeded' ||
            event === 'invoice.paid' ||
            event === 'payment.completed' ||
            body.state === 0 || // Heleket –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å state: 0 –¥–ª—è —É—Å–ø–µ—Ö–∞
            body.result?.status === 'paid') &&
            (body.is_final === true || body.is_final === undefined) // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        );
        
        if (!isPaid) {
            console.log('‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π webhook:', {
                status: status,
                event: event,
                state: body.state,
                result: body.result,
                is_final: body.is_final
            });
            return res.status(200).send('OK'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        if (!order_id) {
            console.error('‚ùå order_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ!');
            console.error('   –ü–æ–ª–Ω—ã–π body:', JSON.stringify(body, null, 2));
            return res.status(400).send('Missing order_id');
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –ø–æ order_id
        console.log('üîç –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î –ø–æ order_id:', order_id);
        const order = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(order_id);
        
        if (!order) {
            console.error('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', order_id);
            console.error('   –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –ë–î...');
            const allOrders = db.prepare('SELECT order_id, status, created_at FROM orders ORDER BY created_at DESC LIMIT 10').all();
            console.error('   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤:', allOrders);
            return res.status(404).send('Order not found');
        }
        
        console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω:', {
            order_id: order.order_id,
            status: order.status,
            customer_name: order.customer_name,
            customer_email: order.customer_email,
            total_amount: order.total_amount,
            created_at: order.created_at
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
        if (order.status === 'paid') {
            console.log('‚ö†Ô∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', order_id);
            return res.status(200).send('OK');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º –≤–∞–ª—é—Ç
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ USD, –∞ –∑–∞–∫–∞–∑ –≤ RUB, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const paymentAmount = parseFloat(amount);
        const orderAmount = parseFloat(order.total_amount);
        const paymentCurrency = currency || 'USD';
        
        console.log('üí± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã:', {
            paymentAmount,
            paymentCurrency,
            orderAmount,
            'orderPaymentMethod': order.payment_method
        });
        
        // –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Heleket, –∑–∞–∫–∞–∑ –±—ã–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ USD –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        // –ü–æ—ç—Ç–æ–º—É —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ USD
        if (order.payment_method === 'Heleket' && paymentCurrency === 'USD') {
            // –ó–∞–∫–∞–∑ –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ RUB, –Ω–æ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤ Heleket –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ USD
            // –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ RUB –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ USD
            try {
                const usdRate = await getUSDRate();
                const orderAmountUSD = orderAmount / usdRate;
                console.log('   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
                    orderAmountRUB: orderAmount,
                    usdRate: usdRate,
                    orderAmountUSD: orderAmountUSD,
                    paymentAmountUSD: paymentAmount
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –¥–æ–ø—É—Å–∫–æ–º 10% (–∫–æ–º–∏—Å—Å–∏—è –∏ –∫–æ–ª–µ–±–∞–Ω–∏—è –∫—É—Ä—Å–∞)
                if (paymentAmount < orderAmountUSD * 0.9) {
                    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', paymentAmount, 'USD –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º:', orderAmountUSD * 0.9, 'USD');
                    return res.status(400).send('Wrong amount');
                }
                console.log('   ‚úÖ –°—É–º–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            } catch (conversionError) {
                console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã:', conversionError);
                // –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–æ–≤–µ—Ä—è–µ–º Heleket)
                console.log('   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
            }
        } else if (paymentCurrency === 'RUB' && order.payment_method !== 'Heleket') {
            // –ï—Å–ª–∏ –∏ –ø–ª–∞—Ç–µ–∂ –∏ –∑–∞–∫–∞–∑ –≤ RUB (YooMoney –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±)
            // –° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ (–¥–æ–ø—É—Å–∫–∞–µ–º –¥–æ 10% –º–µ–Ω—å—à–µ –∏–∑-–∑–∞ –∫–æ–º–∏—Å—Å–∏–π)
            if (paymentAmount < orderAmount * 0.9) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', paymentAmount, paymentCurrency, '–æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º:', orderAmount * 0.9, paymentCurrency);
                return res.status(400).send('Wrong amount');
            }
            console.log('   ‚úÖ –°—É–º–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (RUB)');
        } else {
            console.warn('‚ö†Ô∏è –í–∞–ª—é—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:', {
                paymentCurrency,
                orderPaymentMethod: order.payment_method
            });
            // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã (–¥–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ)
            console.log('   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É–º–º—ã');
        }
        
        console.log('\nüí∞ –ü–ª–∞—Ç–µ–∂ Heleket –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
        console.log('   order_id:', order_id);
        console.log('   –°—É–º–º–∞:', amount, currency);
        console.log('   –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', order.status);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        console.log('\nüí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ "paid"...');
        const updateResult = db.prepare('UPDATE orders SET status = ? WHERE order_id = ?').run('paid', order_id);
        
        if (updateResult.changes === 0) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞!');
            return res.status(500).send('Failed to update order');
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω (–∏–∑–º–µ–Ω–µ–Ω–æ —Å—Ç—Ä–æ–∫:', updateResult.changes, ')');
        orderProcessed = true;
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        const products = JSON.parse(order.products || '[]');
        console.log('\nüì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:', products.length);
        
        // –û–¢–ü–†–ê–í–ö–ê EMAILS –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
        console.log('\nüìß –û–¢–ü–†–ê–í–ö–ê EMAILS –ö–õ–ò–ï–ù–¢–£ (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)...\n');
        let emailsSent = 0;
        let emailsFailed = 0;
        
        for (const product of products) {
            const quantity = product.quantity || 1;
            const productName = product.name || product.productName || product.product_name;
            
            console.log(`\nüì¶ –¢–æ–≤–∞—Ä: "${productName}" (x${quantity})`);
            
            // –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
            let productInfo = db.prepare('SELECT * FROM products WHERE name = ?').get(productName);
            if (!productInfo) {
                const baseName = productName.split('(')[0].split('-')[0].split('|')[0].split('[')[0].trim();
                productInfo = db.prepare('SELECT * FROM products WHERE name LIKE ?').get(baseName + '%');
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            for (let i = 0; i < quantity; i++) {
                const emailData = {
                    to: order.customer_email,
                    orderNumber: order_id,
                    productName: productName,
                    productImage: productInfo ? productInfo.image : (product.image || null),
                    productCategory: productInfo ? productInfo.category : null,
                    productDescription: productInfo ? productInfo.description : null,
                    login: null,
                    password: null,
                    instructions: productInfo ? productInfo.description : '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.'
                };
                
                const emailResult = await sendOrderEmailWithRetry(emailData, 3);
                
                if (emailResult.success) {
                    emailsSent++;
                    console.log(`   ‚úÖ Email ${i + 1}/${quantity} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
                } else {
                    emailsFailed++;
                    console.error(`   ‚ùå Email ${i + 1}/${quantity} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫`);
                }
            }
        }
        
        console.log(`\nüìä –ò–¢–û–ì–û EMAILS: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent}, –æ—à–∏–±–æ–∫ ${emailsFailed}`);
        
        // –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
        console.log('\nüì± –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM (—Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏)...\n');
        
        const telegramMessage = `üí∞ <b>–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ HELEKET!</b>\n\n` +
            `üÜî –ó–∞–∫–∞–∑: <code>${order_id}</code>\n` +
            `üí≥ –ü–ª–∞—Ç–µ–∂: <code>${payment_id || 'N/A'}</code>\n` +
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customer_name}\n` +
            `üìß Email: ${order.customer_email}\n` +
            `üíµ –°—É–º–º–∞: ${amount} ${currency}\n` +
            `üì¶ –¢–æ–≤–∞—Ä—ã: ${products.map(p => p.name || p.productName || p.product_name).join(', ')}\n` +
            `üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}\n\n` +
            `üìä Emails: ‚úÖ ${emailsSent} | ‚ùå ${emailsFailed}\n\n` +
            `üîó <a href="https://truststore.ru/admin.html">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
        
        const telegramSent = await sendTelegramWithRetry(telegramMessage, 3);
        
        if (telegramSent) {
            console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } else {
            console.error('‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }
        
        const duration = ((Date.now() - startTime) / 1000).toFixed(2);
        console.log(`\n‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ ${duration} —Å–µ–∫`);
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
        
        // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK
        res.status(200).send('OK');
        
    } catch (error) {
        console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò WEBHOOK:');
        console.error('   –û—à–∏–±–∫–∞:', error.message);
        console.error('   Stack:', error.stack);
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (orderProcessed) {
            try {
                await sendTelegramNotification(
                    `‚ö†Ô∏è <b>–û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ó–ê–ö–ê–ó–ê HELEKET!</b>\n\n` +
                    `–ó–∞–∫–∞–∑: ${req.body?.order_id || req.body?.orderId || 'unknown'}\n` +
                    `–û—à–∏–±–∫–∞: ${error.message}\n\n` +
                    `–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–∫–∞–∑ –≤—Ä—É—á–Ω—É—é!`,
                    false
                );
            } catch (telegramError) {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', telegramError);
            }
        }
        
        res.status(500).send('Server error');
    }
});

// API –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
app.post('/api/suggest-product', async (req, res) => {
    try {
        const { product_name, description, email } = req.body;
        
        if (!product_name) {
            return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
        }
        
        db.prepare(`
            INSERT INTO product_suggestions (product_name, description, email)
            VALUES (?, ?, ?)
        `).run(product_name, description || '', email || '');
        
        console.log(`üí° –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${product_name}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const telegramMessage = `
üí° <b>–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –¢–û–í–ê–†–ê</b>

üì¶ <b>–¢–æ–≤–∞—Ä:</b> ${product_name}
${description ? `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description}\n` : ''}${email ? `üìß <b>Email:</b> ${email}\n` : ''}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
        `.trim();
        
        await sendTelegramNotification(telegramMessage);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ (–∞–¥–º–∏–Ω)
app.get('/api/product-suggestions', authMiddleware, (req, res) => {
    try {
        const suggestions = db.prepare(`
            SELECT * FROM product_suggestions 
            ORDER BY created_at DESC
        `).all();
        
        res.json(suggestions);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∞–¥–º–∏–Ω)
app.post('/api/product-suggestion-status', authMiddleware, (req, res) => {
    try {
        const { id, status } = req.body;
        
        db.prepare(`
            UPDATE product_suggestions 
            SET status = ?
            WHERE id = ?
        `).run(status, id);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// === –ü–†–û–ú–û–ö–û–î–´ ===

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∞–¥–º–∏–Ω)
app.post('/api/promo-codes', authMiddleware, (req, res) => {
    try {
        const { code, discount, max_uses, expires_at } = req.body;
        
        if (!code || !discount || !max_uses || !expires_at) {
            return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        db.prepare(`
            INSERT INTO promo_codes (code, discount, max_uses, expires_at)
            VALUES (?, ?, ?, ?)
        `).run(code.toUpperCase(), discount, max_uses, expires_at);
        
        console.log(`üé´ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: ${code} (-${discount}%)`);
        res.json({ success: true });
    } catch (error) {
        if (error.message.includes('UNIQUE')) {
            res.status(400).json({ error: '–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        } else {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
            res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
        }
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–∞–¥–º–∏–Ω)
app.get('/api/promo-codes', authMiddleware, (req, res) => {
    try {
        const promoCodes = db.prepare(`
            SELECT * FROM promo_codes 
            ORDER BY created_at DESC
        `).all();
        
        res.json(promoCodes);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∫–ª–∏–µ–Ω—Ç)
app.post('/api/validate-promo', (req, res) => {
    try {
        const { code } = req.body;
        
        if (!code) {
            return res.status(400).json({ error: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }
        
        const promoCode = db.prepare(`
            SELECT * FROM promo_codes 
            WHERE code = ? AND is_active = 1
        `).get(code.toUpperCase());
        
        if (!promoCode) {
            return res.json({ valid: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        const now = new Date();
        const expiresAt = new Date(promoCode.expires_at);
        if (now > expiresAt) {
            return res.json({ valid: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if (promoCode.current_uses >= promoCode.max_uses) {
            return res.json({ valid: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω' });
        }
        
        res.json({ 
            valid: true, 
            discount: promoCode.discount,
            code: promoCode.code
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π)
app.post('/api/apply-promo', (req, res) => {
    try {
        const { code } = req.body;
        
        db.prepare(`
            UPDATE promo_codes 
            SET current_uses = current_uses + 1
            WHERE code = ?
        `).run(code.toUpperCase());
        
        console.log(`üé´ –ü—Ä–æ–º–æ–∫–æ–¥ ${code} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω`);
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∞–¥–º–∏–Ω)
app.delete('/api/promo-codes/:id', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        
        db.prepare('DELETE FROM promo_codes WHERE id = ?').run(id);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∞–¥–º–∏–Ω)
app.post('/api/promo-codes/:id/toggle', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        
        db.prepare(`
            UPDATE promo_codes 
            SET is_active = 1 - is_active
            WHERE id = ?
        `).run(id);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/api/admin-stats', authMiddleware, (req, res) => {
    try {
        console.log('üìä Loading admin stats...');
        // –°–µ—Å—Å–∏–∏
        const totalSessions = db.prepare('SELECT COUNT(*) as count FROM sessions').get();
        const totalPageViews = db.prepare('SELECT COUNT(*) as count FROM visits').get();
        
        // –ó–∞–∫–∞–∑—ã (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
        const totalOrders = db.prepare("SELECT COUNT(*) as count, COALESCE(SUM(total_amount), 0) as revenue FROM orders WHERE status = 'paid'").get();
        const ordersThisMonth = db.prepare(`
            SELECT COUNT(*) as count, COALESCE(SUM(total_amount), 0) as revenue 
            FROM orders 
            WHERE status = 'paid'
            AND created_at >= datetime('now', 'start of month')
        `).get();
        
        const ordersLastMonth = db.prepare(`
            SELECT COUNT(*) as count, COALESCE(SUM(total_amount), 0) as revenue 
            FROM orders 
            WHERE status = 'paid'
            AND created_at >= datetime('now', '-1 month', 'start of month')
            AND created_at < datetime('now', 'start of month')
        `).get();
        
        // –ö–ª–∏–µ–Ω—Ç—ã
        const totalCustomers = db.prepare('SELECT COUNT(*) as count FROM customers').get();
        const newCustomersThisMonth = db.prepare(`
            SELECT COUNT(*) as count FROM customers 
            WHERE created_at >= datetime('now', 'start of month')
        `).get();
        
        // –¢–æ–≤–∞—Ä—ã
        const allProducts = db.prepare('SELECT * FROM products ORDER BY sold_count DESC').all();
        const topProducts = allProducts.slice(0, 5);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        const recentOrders = db.prepare(`
            SELECT * FROM orders 
            ORDER BY created_at DESC 
            LIMIT 10
        `).all().map(order => ({
            ...order,
            products: JSON.parse(order.products)
        }));
        
        // –í—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ Orders
        const allOrders = db.prepare(`
            SELECT * FROM orders 
            ORDER BY created_at DESC
        `).all().map(order => ({
            ...order,
            products: JSON.parse(order.products)
        }));
        
        // –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        const allCustomers = db.prepare(`
            SELECT * FROM customers 
            ORDER BY total_spent DESC
        `).all();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
        const countryStats = db.prepare(`
            SELECT country, country_code, COUNT(*) as sessions, 
                   SUM(pages_count) as pageviews
            FROM sessions 
            WHERE country_code != 'XX'
            GROUP BY country_code 
            ORDER BY sessions DESC
            LIMIT 10
        `).all();

        // –°–µ—Å—Å–∏–∏ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        const dailySessions = db.prepare(`
            SELECT DATE(first_visit) as date, COUNT(*) as count 
            FROM sessions 
            WHERE first_visit >= datetime('now', '-7 days')
            GROUP BY DATE(first_visit)
            ORDER BY date
        `).all();
        
        // –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        const dailySales = db.prepare(`
            SELECT DATE(created_at) as date, SUM(total_amount) as revenue, COUNT(*) as orders
            FROM orders 
            WHERE created_at >= datetime('now', '-7 days')
            GROUP BY DATE(created_at)
            ORDER BY date
        `).all();

        // –ü–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const deviceStats = db.prepare(`
            SELECT device_type, COUNT(*) as count 
            FROM sessions 
            GROUP BY device_type
        `).all();

        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const popularPages = db.prepare(`
            SELECT 
                REPLACE(REPLACE(page, 'index.html', '–ì–ª–∞–≤–Ω–∞—è'), '.html', '') as page,
                COUNT(DISTINCT session_id) as sessions
            FROM visits 
            GROUP BY page 
            ORDER BY sessions DESC
            LIMIT 5
        `).all();

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–µ—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏
        const recentVisits = db.prepare(`
            SELECT 
                v.page, 
                v.ip, 
                v.device_type, 
                v.country,
                v.timestamp,
                CASE 
                    WHEN v.user_agent LIKE '%Chrome%' THEN 'Chrome'
                    WHEN v.user_agent LIKE '%Firefox%' THEN 'Firefox'
                    WHEN v.user_agent LIKE '%Safari%' AND v.user_agent NOT LIKE '%Chrome%' THEN 'Safari'
                    WHEN v.user_agent LIKE '%Edge%' THEN 'Edge'
                    ELSE 'Other'
                END as browser
            FROM visits v
            ORDER BY v.timestamp DESC 
            LIMIT 20
        `).all();

        // –¢–æ–ø 5 —Å—Ç—Ä–∞–Ω —Å –¥–æ–ª—è–º–∏
        const topCountries = countryStats.slice(0, 5);
        const countriesWithShare = topCountries.map(c => ({
            ...c,
            share: ((c.sessions / totalSessions.count) * 100).toFixed(1) + '%'
        }));
        
        // –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const revenueChange = ordersLastMonth.revenue > 0 
            ? (((ordersThisMonth.revenue || 0) - ordersLastMonth.revenue) / ordersLastMonth.revenue * 100).toFixed(1)
            : 100;
        
        const ordersChange = ordersLastMonth.count > 0
            ? (((ordersThisMonth.count || 0) - ordersLastMonth.count) / ordersLastMonth.count * 100).toFixed(1)
            : 100;

        res.json({
            revenue: {
                total: totalOrders.revenue || 0,
                today: 0, // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                week: 0,  // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é
                month: ordersThisMonth.revenue || 0,
                change: revenueChange
            },
            orders: {
                total: totalOrders.count || 0,
                recent: recentOrders,
                all: allOrders,
                change: ordersChange
            },
            customers: {
                total: totalCustomers.count || 0,
                new: newCustomersThisMonth.count || 0,
                all: allCustomers,
                repeat: totalCustomers.count > 0 ? ((allCustomers.filter(c => c.orders_count > 1).length / totalCustomers.count) * 100).toFixed(0) : 0,
                change: 0 // TODO
            },
            products: {
                all: allProducts,
                top: topProducts
            },
            sessions: {
                total: totalSessions.count,
                unique: totalSessions.count,
                desktop: deviceStats.find(d => d.device_type === 'Desktop')?.count || 0,
                mobile: deviceStats.find(d => d.device_type === 'Mobile')?.count || 0,
                change: 0 // TODO
            },
            pageviews: totalPageViews.count,
            countries: countriesWithShare,
            dailySessions,
            dailySales,
            popularPages,
            recentVisits,
            analytics: {
                conversion: totalSessions.count > 0 ? ((totalOrders.count / totalSessions.count) * 100).toFixed(1) : 0,
                avgOrder: totalOrders.count > 0 ? Math.round(totalOrders.revenue / totalOrders.count) : 0,
                bounceRate: 42.5 // TODO: —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            }
        });
        console.log('‚úÖ Admin stats loaded successfully');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
});

// –ö—Ä–∞—Å–∏–≤—ã–µ URL –±–µ–∑ .html
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'main.html'));
});

app.get('/main', (req, res) => {
    res.sendFile(path.join(__dirname, 'main.html'));
});

app.get('/catalog', (req, res) => {
    res.sendFile(path.join(__dirname, 'catalog.html'));
});

app.get('/cart', (req, res) => {
    res.sendFile(path.join(__dirname, 'cart.html'));
});

app.get('/checkout', (req, res) => {
    res.sendFile(path.join(__dirname, 'checkout.html'));
});

app.get('/success', (req, res) => {
    res.sendFile(path.join(__dirname, 'success.html'));
});

app.get('/socials', (req, res) => {
    res.sendFile(path.join(__dirname, 'socials.html'));
});

app.get('/about', (req, res) => {
    res.sendFile(path.join(__dirname, 'about.html'));
});

app.get('/faq', (req, res) => {
    res.sendFile(path.join(__dirname, 'faq.html'));
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Telegram
app.get('/api/telegram-reviews', (req, res) => {
    try {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏–∑ Telegram (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏), –ø–æ—Ç–æ–º –ø–æ ID
        const reviews = db.prepare(`
            SELECT * FROM telegram_reviews 
            ORDER BY telegram_date DESC, id DESC 
            LIMIT 10
        `).all();
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const stats = db.prepare('SELECT total_comments FROM telegram_stats WHERE id = 1').get();
        const totalComments = stats ? stats.total_comments : reviews.length;
        
        res.json({ 
            success: true, 
            reviews, 
            count: reviews.length,
            totalComments: totalComments 
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Telegram (—á–µ—Ä–µ–∑ getUpdates)
async function syncTelegramReviews() {
    try {
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∏–∑ Telegram —á–µ—Ä–µ–∑ getUpdates...');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ (–º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö)
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?limit=100`;
        const response = await fetch(url);
        
        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API');
            return;
        }
        
        const data = await response.json();
        
        if (!data.ok || !data.result) {
            console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API');
            return;
        }
        
        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${data.result.length}`);
        
        let added = 0; // –°—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ù–û–í–´–• –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        const TARGET_POST_ID = 15; // ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π (–ø–æ—Å—Ç #19 –≤ –∫–∞–Ω–∞–ª–µ = —Å–æ–æ–±—â–µ–Ω–∏–µ #15 –≤ –≥—Ä—É–ø–ø–µ)
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for (const update of data.result) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            if (update.message && update.message.chat && update.message.from) {
                const message = update.message;
                
                // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¢–û–õ–¨–ö–û –∫ –Ω—É–∂–Ω–æ–º—É –ø–æ—Å—Ç—É
                if (!message.reply_to_message || message.reply_to_message.message_id !== TARGET_POST_ID) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ù–ï –ø–æ–¥ –Ω—É–∂–Ω—ã–º –ø–æ—Å—Ç–æ–º
                }
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if (message.from.is_bot) continue;
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞)
                if (message.from.username && message.from.username.toLowerCase() === 'truststoreru') {
                    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ Trust Store');
                    continue;
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∞
                const firstName = message.from.first_name || '';
                const lastName = message.from.last_name || '';
                const author = (firstName + ' ' + lastName).trim();
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
                const text = message.text || message.caption || '';
                
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ (—Å –ø–∞—Ä–æ–ª—è–º–∏)
                if (!text.trim() || text.length < 5 || text.includes('o-4zWa6SFWUGo')) continue;
                
                // –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π Maria (message_id)
                const BLACKLISTED_MESSAGES = [1239, 1241, 1242, 1246];
                if (BLACKLISTED_MESSAGES.includes(message.message_id)) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                const existing = db.prepare('SELECT id FROM telegram_reviews WHERE telegram_comment_id = ?').get(message.message_id);
                
                if (!existing) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º timestamp –∏–∑ Telegram (Unix timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
                        const telegramDate = message.date || Math.floor(Date.now() / 1000);
                        
                        db.prepare(`
                            INSERT INTO telegram_reviews (telegram_user_id, author_name, review_text, rating, telegram_comment_id, telegram_date)
                            VALUES (?, ?, ?, 5, ?, ?)
                        `).run(message.from.id, author, text, message.message_id, telegramDate);
                        
                        added++;
                        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–∑—ã–≤ –æ—Ç ${author}: "${text.substring(0, 50)}..."`);
                        
                        // üîÑ –°–ò–°–¢–ï–ú–ê "–î–û–ú–ò–ù–û": –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
                        const totalReviews = db.prepare('SELECT COUNT(*) as count FROM telegram_reviews').get();
                        if (totalReviews.count > 10) {
                            // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –æ—Ç–∑—ã–≤ (–ø–æ telegram_date)
                            const oldestReview = db.prepare(`
                                SELECT id, author_name FROM telegram_reviews 
                                ORDER BY telegram_date ASC 
                                LIMIT 1
                            `).get();
                            
                            if (oldestReview) {
                                db.prepare('DELETE FROM telegram_reviews WHERE id = ?').run(oldestReview.id);
                                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç–∑—ã–≤ –æ—Ç ${oldestReview.author_name} (—Å–∏—Å—Ç–µ–º–∞ –¥–æ–º–∏–Ω–æ)`);
                            }
                        }
                    } catch (err) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏ (UNIQUE constraint)
                        if (!err.message.includes('UNIQUE')) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:`, err.message);
                        }
                    }
                }
            }
        }
        
        // üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –Ω–æ–≤—ã–µ)
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            const currentStats = db.prepare('SELECT total_comments FROM telegram_stats WHERE id = 1').get();
            const currentTotal = currentStats ? currentStats.total_comments : 0;
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ù–û–í–´–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —á–∏—Å–ª—É
            const newTotal = currentTotal + added;
            
            db.prepare(`
                INSERT INTO telegram_stats (id, total_comments, last_updated) 
                VALUES (1, ?, CURRENT_TIMESTAMP)
                ON CONFLICT(id) DO UPDATE SET 
                    total_comments = excluded.total_comments,
                    last_updated = CURRENT_TIMESTAMP
            `).run(newTotal);
            
            console.log(`üìä –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${currentTotal} + ${added} –Ω–æ–≤—ã—Ö = ${newTotal} –≤—Å–µ–≥–æ`);
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err.message);
        }
        
        if (added > 0) {
            console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${added}`);
            
            // üé≤ –°–ò–°–¢–ï–ú–ê –î–û–ú–ò–ù–û: –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–∑—ã–≤–æ–≤
            try {
                const allReviews = db.prepare(`
                    SELECT id FROM telegram_reviews 
                    ORDER BY telegram_date DESC, id DESC
                `).all();
                
                if (allReviews.length > 10) {
                    // –ë–µ—Ä–µ–º ID –æ—Ç–∑—ã–≤–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å (–≤—Å–µ –ø–æ—Å–ª–µ 10-–≥–æ)
                    const reviewsToDelete = allReviews.slice(10).map(r => r.id);
                    const placeholders = reviewsToDelete.map(() => '?').join(',');
                    
                    db.prepare(`DELETE FROM telegram_reviews WHERE id IN (${placeholders})`).run(...reviewsToDelete);
                    
                    console.log(`üé≤ –î–û–ú–ò–ù–û: –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${reviewsToDelete.length} (–æ—Å—Ç–∞–ª–æ—Å—å 10)`);
                    console.log(`   –£–¥–∞–ª–µ–Ω—ã ID: ${reviewsToDelete.join(', ')}`);
                }
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:', err.message);
            }
        } else {
            console.log('‚ÑπÔ∏è –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
syncTelegramReviews();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(syncTelegramReviews, 10 * 60 * 1000);

// –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ (–ë–ï–ó authMiddleware - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç)
app.get('/t1xxas', (req, res) => {
    res.sendFile(path.join(__dirname, 'admin.html'));
});

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º /admin –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.get('/admin', (req, res) => {
    res.redirect('/');
});

// API –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
app.post('/api/newsletter/subscribe', (req, res) => {
    try {
        const { email } = req.body;
        
        if (!email || !email.includes('@')) {
            return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ
        const existing = db.prepare('SELECT * FROM newsletter_subscribers WHERE email = ?').get(email);
        
        if (existing) {
            if (existing.status === 'active') {
                return res.json({ success: true, message: '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!' });
            } else {
                // –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                db.prepare('UPDATE newsletter_subscribers SET status = ? WHERE email = ?').run('active', email);
                return res.json({ success: true, message: '–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!' });
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
        db.prepare('INSERT INTO newsletter_subscribers (email) VALUES (?)').run(email);
        
        console.log('üìß –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫:', email);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
        sendWelcomeEmail(email).then(result => {
            if (result && result.success) {
                console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${email}`);
            } else {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ: ${email}`, result?.error || 'Unknown error');
            }
        }).catch(error => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞: ${email}`, error.message || error);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...');
        const notificationText = `üìß <b>–ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n` +
            `üì¨ Email: ${email}\n` +
            `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}\n\n` +
            `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
        
        sendTelegramNotification(notificationText, true).then(success => {
            if (success) {
                console.log(`‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: ${email}`);
            } else {
                console.error(`‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: ${email}`);
            }
        }).catch(error => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${email}`, error.message || error);
        });
        
        res.json({ success: true, message: '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É üì¨' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
app.get('/api/admin/newsletter/subscribers', authMiddleware, (req, res) => {
    try {
        const subscribers = db.prepare(`
            SELECT * FROM newsletter_subscribers 
            ORDER BY subscribed_at DESC
        `).all();
        
        res.json({ subscribers });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
app.delete('/api/admin/newsletter/subscribers/:id', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        db.prepare('DELETE FROM newsletter_subscribers WHERE id = ?').run(id);
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–¥–º–∏–Ω–∞: –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
app.post('/api/admin/newsletter/send-bulk', authMiddleware, async (req, res) => {
    try {
        const { title, content } = req.body;
        
        if (!title || !content) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        const subscribers = db.prepare(`
            SELECT email FROM newsletter_subscribers 
            WHERE status = 'active'
        `).all();
        
        if (subscribers.length === 0) {
            return res.json({ 
                success: true, 
                message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤',
                sent: 0,
                failed: 0
            });
        }
        
        console.log(`üìß –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...`);
        
        let sent = 0;
        let failed = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å SMTP)
        for (const subscriber of subscribers) {
            try {
                await sendNewsletterEmail({
                    to: subscriber.email,
                    title: title,
                    content: content,
                    date: new Date().toLocaleDateString('ru-RU', { 
                        day: 'numeric', 
                        month: 'long',
                        year: 'numeric' 
                    })
                });
                sent++;
                console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent}/${subscribers.length}: ${subscriber.email}`);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∏—Å—å–º–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä—ã)
                await new Promise(resolve => setTimeout(resolve, 500));
            } catch (error) {
                failed++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${subscriber.email}:`, error.message);
            }
        }
        
        console.log(`üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent}, –æ—à–∏–±–æ–∫ ${failed}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const notificationText = `üì¨ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
            `‚úâÔ∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}\n` +
            `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n` +
            `‚ùå –û—à–∏–±–æ–∫: ${failed}\n` +
            `üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscribers.length}`;
        
        sendTelegramNotification(notificationText, true);
        
        res.json({ 
            success: true, 
            message: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sent} –∏–∑ ${subscribers.length}`,
            sent: sent,
            failed: failed,
            total: subscribers.length
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ==================== NEWS API ====================

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø—É–±–ª–∏—á–Ω—ã–π endpoint)
app.get('/api/news', (req, res) => {
    try {
        const news = db.prepare(`
            SELECT * FROM news 
            ORDER BY sort_order DESC, created_at DESC
            LIMIT 3
        `).all();
        
        res.json({ news });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å (–∞–¥–º–∏–Ω) —Å —Å–∏—Å—Ç–µ–º–æ–π –î–û–ú–ò–ù–û
app.post('/api/admin/news', authMiddleware, (req, res) => {
    try {
        const { date, title, content, image_url, emoji } = req.body;
        
        if (!date || !title || !content) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π sort_order
        const maxOrder = db.prepare('SELECT MAX(sort_order) as max FROM news').get();
        const newSortOrder = (maxOrder.max || 0) + 1;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å
        const result = db.prepare(`
            INSERT INTO news (date, title, content, image_url, emoji, sort_order)
            VALUES (?, ?, ?, ?, ?, ?)
        `).run(date, title, content, image_url || null, emoji || null, newSortOrder);
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: "${title}"`);
        
        // üîÑ –°–ò–°–¢–ï–ú–ê "–î–û–ú–ò–ù–û": –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        const totalNews = db.prepare('SELECT COUNT(*) as count FROM news').get();
        if (totalNews.count > 3) {
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å (–ø–æ sort_order)
            const oldestNews = db.prepare(`
                SELECT id, title FROM news 
                ORDER BY sort_order ASC 
                LIMIT 1
            `).get();
            
            if (oldestNews) {
                db.prepare('DELETE FROM news WHERE id = ?').run(oldestNews.id);
                console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –Ω–æ–≤–æ—Å—Ç—å: "${oldestNews.title}" (—Å–∏—Å—Ç–µ–º–∞ –¥–æ–º–∏–Ω–æ)`);
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const notificationText = `üéâ –ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ!\n\nüìÖ ${date}\nüì∞ ${title}\n\n${content.substring(0, 200)}${content.length > 200 ? '...' : ''}`;
        sendTelegramNotification(notificationText, true);
        
        res.json({ success: true, id: result.lastInsertRowid });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å (–∞–¥–º–∏–Ω)
app.delete('/api/admin/news/:id', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        db.prepare('DELETE FROM news WHERE id = ?').run(id);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å ID: ${id}`);
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// üî• –†–æ—É—Ç–∏–Ω–≥ –¥–ª—è /product/:name (–≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
app.get('/product/:productName', (req, res) => {
    const productName = req.params.productName;
    
    // –ò—â–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ product/
    const productFile = path.join(__dirname, 'product', `${productName}.html`);
    
    if (fs.existsSync(productFile)) {
        return res.sendFile(productFile);
    }
    
    res.status(404).send('Product not found');
});

// ==================== EMAIL FUNCTIONS ====================

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –ø–∏—Å—å–º–∞ —Å –∑–∞–∫–∞–∑–æ–º
function createOrderEmailHTML(data) {
    const { orderNumber, productName, productImage, productCategory, productDescription, login, password, instructions } = data;
    return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber}</title>
  <style>
    @media only screen and (max-width: 600px) {
      .email-container { width: 100% !important; max-width: 100% !important; }
      .email-padding { padding: 20px 16px !important; }
      .header-padding { padding: 20px 16px !important; }
      .header-table { width: 100% !important; }
      .header-table tr { display: block !important; width: 100% !important; }
      .header-left { display: block !important; width: 100% !important; margin-bottom: 16px !important; padding-right: 0 !important; }
      .header-right { display: block !important; width: 100% !important; text-align: left !important; padding-left: 0 !important; padding-top: 12px !important; border-top: 1px solid rgba(255,255,255,0.2) !important; font-size: 13px !important; }
      .product-table { width: 100% !important; }
      .product-table tr { display: flex !important; flex-direction: column !important; width: 100% !important; }
      .product-label { display: block !important; width: 100% !important; margin-bottom: 8px !important; font-weight: 600 !important; }
      .product-name { display: block !important; width: 100% !important; padding-right: 0 !important; margin-bottom: 16px !important; font-size: 17px !important; }
      .product-image { display: block !important; width: 100% !important; text-align: center !important; margin-top: 0 !important; margin-bottom: 16px !important; padding-top: 12px !important; border-top: 1px solid rgba(102,126,234,0.15) !important; }
      .product-image img { margin: 0 auto !important; max-width: 120px !important; max-height: 120px !important; }
      .telegram-card { padding: 20px 16px !important; }
      .telegram-text { font-size: 14px !important; line-height: 1.5 !important; }
      .button-cell { padding: 10px 18px !important; }
      .button-text { font-size: 13px !important; }
      h1 { font-size: 20px !important; }
      .product-info-box { padding: 16px 18px !important; }
    }
  </style>
</head>
<body style="margin:0;padding:0;background:#f5f5f5;font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Arial,sans-serif;">
  <table role="presentation" width="100%" cellspacing="0" cellpadding="0" style="background:#f5f5f5;padding:32px 12px;">
    <tr>
      <td align="center">
        <table role="presentation" width="640" cellspacing="0" cellpadding="0" class="email-container" style="background:#ffffff;border-radius:16px;overflow:hidden;border:1px solid rgba(0,0,0,0.08);box-shadow:0 4px 24px rgba(0,0,0,0.1);max-width:100%;">
          <tr>
            <td class="header-padding" style="padding:28px 32px;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);">
              <table width="100%" cellspacing="0" cellpadding="0" class="header-table">
                <tr>
                  <td class="header-left" align="left" style="vertical-align:middle;">
                    <table cellspacing="0" cellpadding="0">
                      <tr>
                        <td style="padding-right:16px;vertical-align:middle;">
                          <img src="cid:youtube-avatar" alt="Trust Store" style="display:block;max-width:60px;height:60px;border-radius:50%;border:3px solid rgba(255,255,255,0.2);">
                        </td>
                        <td style="vertical-align:middle;">
                          <div style="color:#fff;font-size:24px;font-weight:700;letter-spacing:-0.5px;margin:0;">Trust Store</div>
                          <div style="color:rgba(255,255,255,0.85);font-size:13px;margin-top:2px;">–º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</div>
                        </td>
                      </tr>
                    </table>
                  </td>
                  <td class="header-right" align="right" style="color:#fff;font-size:14px;opacity:.9;white-space:nowrap;vertical-align:middle;padding-left:20px;">–ó–∞–∫–∞–∑ <strong style="font-weight:700;">#${orderNumber}</strong></td>
                </tr>
              </table>
            </td>
          </tr>
          <tr>
            <td class="email-padding" style="padding:32px;color:#1a1a1a;">
              <h1 style="margin:0 0 12px 0;font-size:22px;line-height:1.3;color:#1a1a1a;text-align:center;">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h1>
              <p style="margin:0 0 24px 0;font-size:14px;color:#666;text-align:center;">–ù–∏–∂–µ ‚Äî –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É.</p>
              <div class="product-info-box" style="background:#f8f9ff;border:1px solid rgba(102,126,234,0.15);border-radius:12px;padding:20px 24px;margin:0 0 24px 0;">
                <table role="presentation" width="100%" cellspacing="0" cellpadding="0" class="product-table" style="table-layout:fixed;">
                  <tr>
                    <td class="product-label" style="font-size:14px;color:#1a1a1a;width:80px;vertical-align:middle;white-space:nowrap;">–¢–æ–≤–∞—Ä:</td>
                    <td class="product-name" style="font-size:16px;color:#1a1a1a;font-weight:700;vertical-align:middle;word-wrap:break-word;word-break:break-word;padding-right:16px;">
                      ${productName}
                    </td>
                  </tr>
                  ${productImage ? `<tr>
                    <td class="product-image" colspan="2" style="text-align:center;vertical-align:middle;width:100%;padding-top:16px;border-top:1px solid rgba(102,126,234,0.15);margin-top:16px;">
                      <img src="https://truststore.ru/${productImage}" alt="${productName}" style="max-width:120px;max-height:120px;width:auto;height:auto;object-fit:contain;display:block;margin:0 auto;">
                    </td>
                  </tr>` : ''}
                </table>
              </div>
              <div style="margin:18px 0 22px 0;">
                <div class="telegram-card" style="background:linear-gradient(135deg, #667eea 0%, #764ba2 100%);border-radius:12px;padding:24px;text-align:center;box-shadow:0 4px 12px rgba(102,126,234,0.2);">
                  <div class="telegram-text" style="font-size:15px;color:#ffffff;margin:0 0 12px 0;line-height:1.6;">
                    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ 
                    <a href="https://t.me/truststore_admin" style="color:#ffffff;font-weight:700;text-decoration:underline;text-decoration-thickness:2px;text-underline-offset:3px;">@truststore_admin</a> 
                    –≤ Telegram
                  </div>
                  <table role="presentation" cellspacing="0" cellpadding="0" style="margin:16px auto 0;">
                    <tr>
                      <td style="background:#ffffff;padding:12px 24px;border-radius:8px;">
                        <a href="https://t.me/truststore_admin" style="font-size:15px;color:#667eea;text-decoration:none;font-weight:700;display:inline-block;">
                          ‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
                        </a>
                      </td>
                    </tr>
                  </table>
                </div>
              </div>
              ${instructions ? `
              <div style="background:#fff9e6;border:1px solid rgba(255,184,0,0.35);border-radius:12px;padding:16px 18px;margin:0 0 22px 0;">
                <div style="font-size:14px;font-weight:600;margin:0 0 6px 0;color:#B45309;">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</div>
                <div style="font-size:13px;line-height:1.7;color:#666;">${instructions}</div>
              </div>` : ''}
              <table role="presentation" cellspacing="0" cellpadding="0" style="margin-top:4px;">
                <tr>
                  <td class="button-cell" style="background:#667eea;padding:12px 22px;border-radius:10px;">
                    <a href="https://truststore.ru" class="button-text" style="font-size:14px;color:#fff;text-decoration:none;display:inline-block;">–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω</a>
                  </td>
                </tr>
              </table>
            </td>
          </tr>
          <tr>
            <td style="padding:20px 28px;border-top:1px solid rgba(0,0,0,0.08);text-align:center;color:#999;font-size:12px;background:#f8f9ff;">
              –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ.<br>¬© ${new Date().getFullYear()} Trust Store
            </td>
          </tr>
        </table>
      </td>
    </tr>
  </table>
</body>
</html>
    `;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –ø–∏—Å—å–º–∞
function createOrderEmailText(data) {
    const { orderNumber, productName } = data;
    return `
–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!

–í–∞—à –∑–∞–∫–∞–∑ #${orderNumber}

–¢–æ–≤–∞—Ä: ${productName}

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @truststore_admin –≤ Telegram: https://t.me/truststore_admin

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ.

¬© ${new Date().getFullYear()} Trust Store
`;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å –∑–∞–∫–∞–∑–æ–º
async function sendOrderEmail(data) {
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ SendGrid (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if (process.env.SENDGRID_API_KEY) {
        try {
            // –ß–∏—Ç–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è
            const logoPath = path.join(__dirname, 'youtube-avatar.png');
            let attachments = [];
            
            if (fs.existsSync(logoPath)) {
                const logoContent = fs.readFileSync(logoPath);
                attachments.push({
                    content: logoContent.toString('base64'),
                    filename: 'youtube-avatar.png',
                    type: 'image/png',
                    disposition: 'inline',
                    content_id: 'youtube-avatar'
                });
            }
            
            const msg = {
                to: data.to,
                from: process.env.EMAIL_USER || 'orders@truststore.ru',
                subject: `–í–∞—à –∑–∞–∫–∞–∑ #${data.orderNumber} | Trust Store`,
                html: createOrderEmailHTML(data),
                text: createOrderEmailText(data),
                headers: {
                    'X-Mailer': 'Trust Store',
                    'List-Unsubscribe': '<https://truststore.ru/unsubscribe>'
                },
                attachments: attachments
            };
            
            const response = await sgMail.send(msg);
            console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SendGrid: ${data.to}${attachments.length > 0 ? ' (—Å –ª–æ–≥–æ—Ç–∏–ø–æ–º)' : ''}`);
            const messageId = response && response[0] && response[0].headers ? response[0].headers['x-message-id'] : 'unknown';
            return { success: true, messageId: messageId, method: 'SendGrid' };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ SendGrid:', error.message);
            console.error('   –î–µ—Ç–∞–ª–∏:', error.response?.body || error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ SMTP
        }
    }
    
    // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ SMTP
    try {
        const mailOptions = {
            from: process.env.EMAIL_FROM || '"Trust Store" <orders@truststore.ru>',
            to: data.to,
            replyTo: 'orders@truststore.ru',
            subject: `–í–∞—à –∑–∞–∫–∞–∑ #${data.orderNumber} | Trust Store`,
            html: createOrderEmailHTML(data),
            text: createOrderEmailText(data),
            headers: {
                'X-Mailer': 'Trust Store',
                'List-Unsubscribe': '<https://truststore.ru/unsubscribe>',
                'X-Priority': '3',
                'X-MSMail-Priority': 'Normal'
            },
            attachments: [
                {
                    filename: 'youtube-avatar.png',
                    path: path.join(__dirname, 'youtube-avatar.png'),
                    cid: 'youtube-avatar'
                }
            ]
        };

        const info = await emailTransporter.sendMail(mailOptions);
        console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMTP: ${data.to} (${info.messageId})`);
        return { success: true, messageId: info.messageId, method: 'SMTP' };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (SMTP):', error.message);
        return { success: false, error: error.message, note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ SENDGRID_API_KEY' };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ
function createWelcomeEmailHTML() {
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Trust Store!</title>
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; background: #f5f5f5;">
    <table width="100%" cellpadding="0" cellspacing="0" style="background: #f5f5f5; padding: 40px 20px;">
        <tr>
            <td align="center">
                <table width="600" cellpadding="0" cellspacing="0" style="background: white; border-radius: 16px; overflow: hidden; box-shadow: 0 4px 24px rgba(0,0,0,0.1);">
                    <!-- Header with Logo -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 40px; text-align: center;">
                            <img src="cid:logo" alt="Trust Store" style="max-width: 180px; height: auto; margin-bottom: 16px;" />
                            <h1 style="color: white; margin: 0; font-size: 28px; font-weight: 700;">Trust Store</h1>
                            <p style="color: rgba(255,255,255,0.9); margin: 8px 0 0 0; font-size: 16px;">–í–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
                        </td>
                    </tr>
                    
                    <!-- Welcome Content -->
                    <tr>
                        <td style="padding: 40px;">
                            <h2 style="color: #1a1a1a; margin: 0 0 24px 0; font-size: 24px;">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ</h2>
                            
                            <div style="background: #f8f9ff; border-left: 4px solid #667eea; padding: 24px; margin-bottom: 24px; border-radius: 8px;">
                                <p style="margin: 0 0 16px 0; color: #1a1a1a; font-size: 16px; line-height: 1.6;">
                                    –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ —á–∏—Å–ª–µ –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! 
                                </p>
                                <p style="margin: 0; color: #666; font-size: 16px; line-height: 1.6;">
                                    –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞—Ç—å –æ <b style="color: #667eea;">—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö</b>, 
                                    <b style="color: #667eea;">—Å–∫–∏–¥–∫–∞—Ö</b> –∏ <b style="color: #667eea;">–Ω–æ–≤–∏–Ω–∫–∞—Ö</b> –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞!
                                </p>
                            </div>
                            
                            <div style="background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%); border-radius: 12px; padding: 24px; margin-bottom: 24px;">
                                <p style="margin: 0 0 12px 0; color: #1a1a1a; font-size: 18px; font-weight: 600;">üéÅ –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</p>
                                <ul style="margin: 0; padding-left: 24px; color: #666; font-size: 15px; line-height: 2;">
                                    <li>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</li>
                                    <li>–ü–µ—Ä–≤—ã–º–∏ —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö</li>
                                    <li>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</li>
                                    <li>–ü–æ–ª–µ–∑–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤</li>
                                </ul>
                            </div>
                            
                            <div style="text-align: center; margin-top: 32px;">
                                <a href="https://truststore.ru" style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; padding: 16px 48px; border-radius: 12px; font-size: 16px; font-weight: 600; box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);">
                                    –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω
                                </a>
                            </div>
                        </td>
                    </tr>
                    
                    <!-- Footer -->
                    <tr>
                        <td style="background: #f8f9ff; padding: 32px; text-align: center; border-top: 1px solid #e0e0e0;">
                            <p style="margin: 0 0 12px 0; color: #1a1a1a; font-size: 16px; font-weight: 600;">–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?</p>
                            <p style="margin: 0 0 16px 0; color: #666; font-size: 14px;">–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ</p>
                            <p style="margin: 0; color: #999; font-size: 12px;">¬© ${new Date().getFullYear()} Trust Store. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
async function sendWelcomeEmail(email) {
    try {
        console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞: ${email}`);
        
        const mailOptions = {
            from: process.env.EMAIL_FROM || '"Trust Store" <orders@truststore.ru>',
            to: email,
            subject: 'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ Trust Store!',
            html: createWelcomeEmailHTML(),
            attachments: [
                {
                    filename: 'logo.png',
                    path: path.join(__dirname, 'logo.png'),
                    cid: 'logo'
                }
            ]
        };

        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ SendGrid, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if (process.env.SENDGRID_API_KEY && sgMail) {
            try {
                console.log(`   –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ SendGrid...`);
                await sgMail.send({
                    to: email,
                    from: process.env.EMAIL_USER || process.env.EMAIL_FROM || 'orders@truststore.ru',
                    subject: 'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ Trust Store!',
                    html: createWelcomeEmailHTML(),
                    attachments: [
                        {
                            filename: 'logo.png',
                            content: fs.readFileSync(path.join(__dirname, 'logo.png')).toString('base64'),
                            type: 'image/png',
                            disposition: 'inline',
                            contentId: 'logo'
                        }
                    ]
                });
                console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SendGrid: ${email}`);
                return { success: true, method: 'SendGrid' };
            } catch (sgError) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ SendGrid: ${sgError.message}, –ø—Ä–æ–±—É–µ–º SMTP...`);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ SMTP
        const info = await emailTransporter.sendMail(mailOptions);
        console.log(`‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SMTP: ${email} (${info.messageId})`);
        return { success: true, messageId: info.messageId, method: 'SMTP' };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞:', error.message || error);
        console.error('   Stack:', error.stack);
        return { success: false, error: error.message || 'Unknown error' };
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
function createNewsletterHTML(data) {
    const { title, content, date, unsubscribeLink } = data;
    
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif; background: #f5f5f5;">
    <table width="100%" cellpadding="0" cellspacing="0" style="background: #f5f5f5; padding: 40px 20px;">
        <tr>
            <td align="center">
                <table width="600" cellpadding="0" cellspacing="0" style="background: white; border-radius: 16px; overflow: hidden; box-shadow: 0 4px 24px rgba(0,0,0,0.1);">
                    <!-- Header -->
                    <tr>
                        <td style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 32px; text-align: center;">
                            <img src="cid:logo" alt="Trust Store" style="max-width: 140px; height: auto;" />
                        </td>
                    </tr>
                    
                    <!-- Content -->
                    <tr>
                        <td style="padding: 40px;">
                            <p style="margin: 0 0 16px 0; color: #667eea; font-size: 14px; font-weight: 600; text-transform: uppercase;">üì∞ –ù–æ–≤–æ—Å—Ç–∏</p>
                            <h1 style="margin: 0 0 16px 0; color: #1a1a1a; font-size: 28px; font-weight: 700; line-height: 1.3;">${title}</h1>
                            ${date ? `<p style="margin: 0 0 24px 0; color: #999; font-size: 14px;">üìÖ ${date}</p>` : ''}
                            
                            <div style="color: #666; font-size: 16px; line-height: 1.8; margin-bottom: 32px;">
                                ${content}
                            </div>
                            
                            <div style="text-align: center;">
                                <a href="https://truststore.ru" style="display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; padding: 16px 48px; border-radius: 12px; font-size: 16px; font-weight: 600;">
                                    –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
                                </a>
                            </div>
                        </td>
                    </tr>
                    
                    <!-- Footer -->
                    <tr>
                        <td style="background: #f8f9ff; padding: 24px; text-align: center; border-top: 1px solid #e0e0e0;">
                            <p style="margin: 0 0 12px 0; color: #666; font-size: 14px;">Trust Store ‚Äî –í–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤</p>
                            ${unsubscribeLink ? `<p style="margin: 0; font-size: 12px;"><a href="${unsubscribeLink}" style="color: #999; text-decoration: underline;">–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</a></p>` : ''}
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
    </table>
</body>
</html>
    `;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendNewsletterEmail(data) {
    try {
        const mailOptions = {
            from: process.env.EMAIL_FROM || '"Trust Store" <orders@truststore.ru>',
            to: data.to,
            subject: `üì∞ ${data.title} | Trust Store`,
            html: createNewsletterHTML(data),
            attachments: [
                {
                    filename: 'logo.png',
                    path: path.join(__dirname, 'logo.png'),
                    cid: 'logo'
                }
            ]
        };

        const info = await emailTransporter.sendMail(mailOptions);
        console.log(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${data.to}`);
        return { success: true, messageId: info.messageId };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error.message);
        return { success: false, error: error.message };
    }
}

// ==================== EMAIL API ENDPOINTS ====================

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ (–∞–¥–º–∏–Ω)
app.post('/api/admin/test-email', authMiddleware, async (req, res) => {
    try {
        const { to } = req.body;
        
        const result = await sendOrderEmail({
            to: to || process.env.EMAIL_USER,
            orderNumber: 'TEST-' + Date.now(),
            productName: 'ChatGPT Plus 1 –º–µ—Å—è—Ü (—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑)',
            login: 'test@example.com',
            password: 'TestPassword123',
            instructions: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ chat.openai.com –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞.'
        });
        
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –∑–∞–∫–∞–∑–æ–º (–∞–¥–º–∏–Ω)
app.post('/api/admin/send-order-email', authMiddleware, async (req, res) => {
    try {
        const { to, orderNumber, productName, login, password, instructions } = req.body;
        
        if (!to || !orderNumber || !productName || !login || !password) {
            return res.status(400).json({ error: '–ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
        }
        
        const result = await sendOrderEmail({
            to,
            orderNumber,
            productName,
            login,
            password,
            instructions
        });
        
        res.json(result);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–∞–¥–º–∏–Ω)
app.post('/api/admin/send-newsletter', authMiddleware, async (req, res) => {
    try {
        const { newsId } = req.body;
        
        if (!newsId) {
            return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –Ω–æ–≤–æ—Å—Ç–∏' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å –∏–∑ –±–∞–∑—ã
        const news = db.prepare('SELECT * FROM news WHERE id = ?').get(newsId);
        
        if (!news) {
            return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        const subscribers = db.prepare(`
            SELECT * FROM newsletter_subscribers 
            WHERE status = 'active'
        `).all();
        
        if (subscribers.length === 0) {
            return res.json({ success: true, sent: 0, message: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' });
        }
        
        let sent = 0;
        let failed = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        for (const subscriber of subscribers) {
            const result = await sendNewsletterEmail({
                to: subscriber.email,
                title: news.title,
                content: news.content,
                date: news.date,
                unsubscribeLink: `https://truststore.ru/unsubscribe?email=${encodeURIComponent(subscriber.email)}`
            });
            
            if (result.success) {
                sent++;
            } else {
                failed++;
            }
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∞–º)
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const notificationText = `üìß –†–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüì∞ ${news.title}\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}\n‚ùå –û—à–∏–±–æ–∫: ${failed}`;
        sendTelegramNotification(notificationText, true);
        
        res.json({ success: true, sent, failed, total: subscribers.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ==================== PRODUCT INVENTORY API (–ê–î–ú–ò–ù–ö–ê) ====================

// –ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤
app.get('/api/admin/inventory', authMiddleware, (req, res) => {
    try {
        const inventory = db.prepare(`
            SELECT * FROM product_inventory 
            ORDER BY created_at DESC
        `).all();
        
        res.json({ inventory });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
app.post('/api/admin/inventory', authMiddleware, (req, res) => {
    try {
        const { product_name, login, password, instructions } = req.body;
        
        if (!product_name || !login || !password) {
            return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
        }
        
        db.prepare(`
            INSERT INTO product_inventory (product_name, login, password, instructions)
            VALUES (?, ?, ?, ?)
        `).run(product_name, login, password, instructions || '');
        
        console.log('üì¶ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', product_name);
        
        res.json({ success: true, message: '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
app.delete('/api/admin/inventory/:id', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        
        db.prepare('DELETE FROM product_inventory WHERE id = ?').run(id);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º
app.get('/api/admin/inventory/stats', authMiddleware, (req, res) => {
    try {
        const stats = db.prepare(`
            SELECT 
                product_name,
                COUNT(*) as total,
                SUM(CASE WHEN status = 'available' THEN 1 ELSE 0 END) as available,
                SUM(CASE WHEN status = 'sold' THEN 1 ELSE 0 END) as sold
            FROM product_inventory
            GROUP BY product_name
        `).all();
        
        res.json({ stats });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ==================== EMAIL INBOX API (–ê–î–ú–ò–ù–ö–ê) ====================

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞
app.get('/api/admin/emails', authMiddleware, (req, res) => {
    try {
        const { filter, limit = 50 } = req.query;
        
        let query = 'SELECT * FROM email_messages';
        const params = [];
        
        if (filter === 'unread') {
            query += ' WHERE is_read = 0';
        } else if (filter === 'read') {
            query += ' WHERE is_read = 1';
        }
        
        query += ' ORDER BY created_at DESC LIMIT ?';
        params.push(parseInt(limit));
        
        const emails = db.prepare(query).all(...params);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç–≤–µ—Ç–∞—Ö
        const emailsWithReplies = emails.map(email => {
            const replies = db.prepare(`
                SELECT * FROM email_replies 
                WHERE original_message_id = ?
                ORDER BY sent_at DESC
            `).all(email.id);
            
            return {
                ...email,
                has_reply: replies.length > 0,
                replies_count: replies.length
            };
        });
        
        res.json({ emails: emailsWithReplies });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ –ø–∏—Å—å–º–æ –ø–æ ID
app.get('/api/admin/emails/:id', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        
        const email = db.prepare('SELECT * FROM email_messages WHERE id = ?').get(id);
        
        if (!email) {
            return res.status(404).json({ error: '–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        db.prepare('UPDATE email_messages SET is_read = 1 WHERE id = ?').run(id);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        const replies = db.prepare(`
            SELECT * FROM email_replies 
            WHERE original_message_id = ?
            ORDER BY sent_at DESC
        `).all(id);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        const attachments = db.prepare(`
            SELECT * FROM email_attachments 
            WHERE email_message_id = ?
            ORDER BY created_at ASC
        `).all(id);
        
        res.json({ email: { ...email, replies, attachments } });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// Endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ email
app.post('/api/admin/emails/reply/upload-image', authMiddleware, uploadEmailReply.single('image'), (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }
        
        const imageUrl = `/uploads/email-reply-images/${req.file.filename}`;
        res.json({ success: true, imageUrl: imageUrl });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–æ
app.post('/api/admin/emails/:id/reply', authMiddleware, async (req, res) => {
    try {
        const { id } = req.params;
        const { subject, body, imageUrl } = req.body;
        
        if (!subject || !body) {
            return res.status(400).json({ error: '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
        const originalEmail = db.prepare('SELECT * FROM email_messages WHERE id = ?').get(id);
        
        if (!originalEmail) {
            return res.status(404).json({ error: '–ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        // –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è - —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∏—Å—å–º–æ (from_email)
        const recipientEmail = originalEmail.from_email;
        
        console.log(`üìß === –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê –ù–ê –ü–ò–°–¨–ú–û #${id} ===`);
        console.log(`   –ü–æ–ª—É—á–∞—Ç–µ–ª—å (from_email): ${recipientEmail}`);
        console.log(`   –û—Ç (EMAIL_USER): ${process.env.EMAIL_USER || 'orders@truststore.ru'}`);
        console.log(`   –¢–µ–º–∞ –æ—Ç–≤–µ—Ç–∞: ${subject}`);
        console.log(`   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${body.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        if (!recipientEmail || recipientEmail === 'unknown@example.com') {
            console.error(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${recipientEmail}`);
            return res.status(400).json({ error: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }
        
        const mailOptions = {
            from: process.env.EMAIL_FROM || `"Trust Store" <${process.env.EMAIL_USER || 'orders@truststore.ru'}>`,
            to: recipientEmail,
            replyTo: process.env.EMAIL_USER || 'orders@truststore.ru',
            subject: subject.startsWith('Re:') ? subject : `Re: ${subject}`,
            html: `
                <div style="font-family: Arial, sans-serif; line-height: 1.6;">
                    <div style="background: #f5f5f5; padding: 15px; border-left: 4px solid #667eea; margin-bottom: 20px;">
                        <div style="color: #666; font-size: 12px; margin-bottom: 10px;">
                            <strong>–û—Ç–≤–µ—Ç –Ω–∞:</strong><br>
                            –û—Ç: ${originalEmail.from_name || originalEmail.from_email}<br>
                            –î–∞—Ç–∞: ${new Date(originalEmail.created_at).toLocaleString('ru-RU')}<br>
                            –¢–µ–º–∞: ${originalEmail.subject}
                        </div>
                        <div style="color: #333; font-size: 13px; white-space: pre-wrap;">${originalEmail.body_text || originalEmail.body_html || ''}</div>
                    </div>
                    <div style="color: #333; white-space: pre-wrap;">${body.replace(/\n/g, '<br>')}</div>
                    ${imageUrl ? `<div style="margin: 20px 0;"><img src="https://truststore.ru${imageUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100%; border-radius: 8px;"></div>` : ''}
                    <hr style="border: none; border-top: 1px solid #ddd; margin: 20px 0;">
                    <div style="color: #999; font-size: 12px;">
                        Trust Store<br>
                        –ú–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    </div>
                </div>
            `,
            text: `–û—Ç–≤–µ—Ç –Ω–∞ –ø–∏—Å—å–º–æ –æ—Ç ${originalEmail.from_name || originalEmail.from_email}:\n\n${originalEmail.body_text || ''}\n\n---\n\n${body}${imageUrl ? '\n\n[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ]' : ''}`,
            attachments: imageUrl ? [{
                filename: path.basename(imageUrl),
                path: path.join(__dirname, imageUrl)
            }] : []
        };
        
        // –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î (–¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–µ —É–¥–∞—Å—Ç—Å—è)
        try {
            db.prepare(`
                INSERT INTO email_replies (original_message_id, reply_subject, reply_body)
                VALUES (?, ?, ?)
            `).run(id, subject, body);
            console.log(`‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è –ø–∏—Å—å–º–∞ #${id}`);
        } catch (dbError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î:`, dbError.message);
            return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î', details: dbError.message });
        }
        
        // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email
        try {
            console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —á–µ—Ä–µ–∑ SMTP...`);
            await emailTransporter.sendMail(mailOptions);
            console.log(`‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${recipientEmail}`);
            
            // –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
            db.prepare('UPDATE email_messages SET is_read = 1 WHERE id = ?').run(id);
            
            console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω:`);
            console.log(`   –û—Ç: ${process.env.EMAIL_USER || 'orders@truststore.ru'}`);
            console.log(`   –ö–æ–º—É: ${recipientEmail}`);
            console.log(`   –¢–µ–º–∞: ${mailOptions.subject}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ (—Ñ–æ—Ç–æ)
            const attachments = db.prepare(`
                SELECT * FROM email_attachments 
                WHERE email_message_id = ? AND content_type LIKE 'image/%'
                ORDER BY created_at ASC
            `).all(id);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            const telegramMsg = `üìß –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–∏—Å—å–º–æ\n\n–û—Ç: ${process.env.EMAIL_USER || 'orders@truststore.ru'}\n–ö–æ–º—É: ${recipientEmail}\n–¢–µ–º–∞: ${mailOptions.subject}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω–æ–º)
            const hasReplyImage = imageUrl && imageUrl.trim() !== '';
            
            // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (hasReplyImage) {
                console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –≤ Telegram: ${imageUrl}`);
                sendTelegramPhoto(imageUrl, telegramMsg, false).then(() => {
                    console.log(`‚úÖ Telegram —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
                    
                    // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
                    if (attachments.length > 0) {
                        console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ ${attachments.length} —Ñ–æ—Ç–æ –∏–∑ –ø–∏—Å—å–º–∞...`);
                        setTimeout(() => {
                            const firstAttachment = attachments[0];
                            sendTelegramPhoto(firstAttachment.file_path, `–§–æ—Ç–æ –∏–∑ –ø–∏—Å—å–º–∞: ${firstAttachment.filename}`, false).then(() => {
                                for (let i = 1; i < attachments.length; i++) {
                                    setTimeout(() => {
                                        sendTelegramPhoto(attachments[i].file_path, `${recipientEmail}: ${attachments[i].filename}`, false).catch(err => {
                                            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ #${i + 1}:`, err.message);
                                        });
                                    }, i * 1000);
                                }
                            }).catch(err => {
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–∏—Å—å–º–∞:`, err.message);
                            });
                        }, 1500);
                    }
                }).catch(err => {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞:`, err.message);
                    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∏–∑ –ø–∏—Å—å–º–∞
                    if (attachments.length > 0) {
                        const firstAttachment = attachments[0];
                        sendTelegramPhoto(firstAttachment.file_path, telegramMsg, false).catch(e => {
                            sendTelegramNotification(telegramMsg, false).catch(e2 => {
                                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —Ç–µ–∫—Å—Ç:`, e2.message);
                            });
                        });
                    } else {
                        sendTelegramNotification(telegramMsg, false).catch(e => {
                            console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —Ç–µ–∫—Å—Ç:`, e.message);
                        });
                    }
                });
            } else if (attachments.length > 0) {
                // –ù–µ—Ç —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–æ –µ—Å—Ç—å —Ñ–æ—Ç–æ –≤ –ø–∏—Å—å–º–µ
                console.log(`üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ ${attachments.length} —Ñ–æ—Ç–æ –∏–∑ –ø–∏—Å—å–º–∞...`);
                const firstAttachment = attachments[0];
                sendTelegramPhoto(firstAttachment.file_path, telegramMsg, false).then(() => {
                    console.log(`‚úÖ Telegram —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${firstAttachment.filename}`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    for (let i = 1; i < attachments.length; i++) {
                        setTimeout(() => {
                            sendTelegramPhoto(attachments[i].file_path, `${recipientEmail}: ${attachments[i].filename}`, false).catch(err => {
                                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ #${i + 1}:`, err.message);
                            });
                        }, i * 1000);
                    }
                }).catch(err => {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ñ–æ—Ç–æ:`, err.message);
                    // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    sendTelegramNotification(telegramMsg, false).catch(e => {
                        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —Ç–µ–∫—Å—Ç:`, e.message);
                    });
                });
            } else {
                // –ù–µ—Ç —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                sendTelegramNotification(telegramMsg, false).catch(err => {
                    console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:`, err.message);
                });
            }
            
            res.json({ success: true, message: '–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' });
        } catch (emailError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:`, emailError.message);
            console.error(`   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:`, emailError.stack);
            
            // –û—Ç–≤–µ—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î, –Ω–æ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
            // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            const telegramMsg = `‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n–û—à–∏–±–∫–∞: ${emailError.message}\n–ö–æ–º—É: ${recipientEmail}\n–¢–µ–º–∞: ${mailOptions.subject}`;
            sendTelegramNotification(telegramMsg, false).catch(err => {
                console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:`, err.message);
            });
            
            res.json({ 
                success: true, 
                message: '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email',
                warning: emailError.message 
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
app.get('/api/admin/emails/unread/count', authMiddleware, (req, res) => {
    try {
        const count = db.prepare('SELECT COUNT(*) as count FROM email_messages WHERE is_read = 0').get();
        res.json({ count: count.count });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–º–µ—Ç–∏—Ç—å –ø–∏—Å—å–º–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ/–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
app.put('/api/admin/emails/:id/read', authMiddleware, (req, res) => {
    try {
        const { id } = req.params;
        const { is_read } = req.body;
        
        db.prepare('UPDATE email_messages SET is_read = ? WHERE id = ?').run(is_read ? 1 : 0, id);
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∏—Å—å–º–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ==================== IMAP EMAIL LISTENER ====================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ –ë–î
function saveEmailToDB(mail) {
    try {
        const messageId = mail.messageId || mail.uid || `msg-${Date.now()}-${Math.random()}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –ø–∏—Å—å–º–æ
        const existing = db.prepare('SELECT id FROM email_messages WHERE message_id = ?').get(messageId);
        if (existing) {
            console.log(`‚è∏Ô∏è  –ü–∏—Å—å–º–æ ${messageId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return;
        }
        
        const fromEmail = mail.from && mail.from[0] ? mail.from[0].address : 'unknown@example.com';
        const fromName = mail.from && mail.from[0] ? (mail.from[0].name || fromEmail) : fromEmail;
        const subject = mail.subject || '–ë–µ–∑ —Ç–µ–º—ã';
        const bodyText = mail.text || '';
        const bodyHtml = mail.html || '';
        const toEmail = mail.to && mail.to[0] ? mail.to[0].address : process.env.EMAIL_USER || 'orders@truststore.ru';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ –ø–∏—Å—å–º–æ
        const replyToMessageId = mail.inReplyTo || mail.references || null;
        
        db.prepare(`
            INSERT INTO email_messages (message_id, from_email, from_name, to_email, subject, body_text, body_html, reply_to_message_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `).run(messageId, fromEmail, fromName, toEmail, subject, bodyText, bodyHtml, replyToMessageId);
        
        console.log(`üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fromEmail} - ${subject}`);
        
        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –í–°–ï–• –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
        const preview = bodyText.substring(0, 200) + (bodyText.length > 200 ? '...' : '');
        const isSpam = subject.startsWith('[–°–ü–ê–ú]');
        const spamPrefix = isSpam ? 'üö® –°–ü–ê–ú: ' : '';
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º email –∞–¥—Ä–µ—Å–∞ –¥–ª—è Telegram (–±–µ–∑ < > —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–æ —Å HTML)
        const telegramMessage = `${spamPrefix}üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ ${toEmail}\n\nüë§ –û—Ç: ${fromName}\nüìß Email: ${fromEmail}\nüìå –¢–µ–º–∞: ${subject}\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${preview}\n\nüí° –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!`;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–° (–Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${fromEmail}...`);
        sendTelegramNotification(telegramMessage, false).then(() => {
            console.log(`‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–∏—Å—å–º–∞ –æ—Ç ${fromEmail}`);
        }).catch(err => {
            console.error(`‚ùå –ö–†–ò–¢–ò–ß–ù–û: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${fromEmail}:`, err.message || err);
            // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${fromEmail}...`);
                sendTelegramNotification(telegramMessage, false).catch(e => {
                    console.error(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è ${fromEmail}:`, e.message || e);
                });
            }, 2000);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ –ë–î:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function saveNewEmail(parsed, folderName) {
    try {
        // –ü–æ–ª—É—á–∞–µ–º messageId
        let messageId = parsed.messageId || 
            (parsed.headers?.get?.('message-id')) || 
            `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
        const existing = db.prepare('SELECT id FROM email_messages WHERE message_id = ?').get(messageId);
        if (existing) {
            return false; // –£–∂–µ –µ—Å—Ç—å, –Ω–µ –Ω–æ–≤–æ–µ
        }
        
        // –ü–∞—Ä—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        let fromEmail = 'unknown@example.com';
        let fromName = 'Unknown';
        if (parsed.from) {
            if (typeof parsed.from === 'string') {
                fromEmail = parsed.from;
                fromName = parsed.from;
            } else if (parsed.from.value && Array.isArray(parsed.from.value) && parsed.from.value[0]) {
                fromEmail = parsed.from.value[0].address || fromEmail;
                fromName = parsed.from.value[0].name || fromEmail;
            } else if (parsed.from.address) {
                fromEmail = parsed.from.address;
                fromName = parsed.from.name || fromEmail;
            }
        }
        
        const subject = (parsed.subject || '–ë–µ–∑ —Ç–µ–º—ã').substring(0, 500);
        const bodyText = (parsed.text || '').substring(0, 50000);
        const bodyHtml = (parsed.html || '').substring(0, 50000);
        
        // –ü–æ–º–µ—á–∞–µ–º —Å–ø–∞–º
        const finalSubject = (folderName === 'Spam' || folderName === '–°–ø–∞–º') 
            ? `[–°–ü–ê–ú] ${subject}` 
            : subject;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        const result = db.prepare(`
            INSERT INTO email_messages (message_id, from_email, from_name, to_email, subject, body_text, body_html, reply_to_message_id, is_read)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, 0)
        `).run(messageId, fromEmail, fromName, process.env.EMAIL_USER, finalSubject, bodyText, bodyHtml, null);
        
        const emailId = result.lastInsertRowid;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        const attachments = parsed.attachments || [];
        const imageAttachments = [];
        
        if (attachments.length > 0) {
            const attachmentsDir = path.join(__dirname, 'uploads', 'email-attachments');
            if (!fs.existsSync(attachmentsDir)) {
                fs.mkdirSync(attachmentsDir, { recursive: true });
            }
            
            for (const attachment of attachments) {
                try {
                    const uniqueFilename = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}-${attachment.filename || 'attachment'}`;
                    const filePath = path.join(attachmentsDir, uniqueFilename);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    fs.writeFileSync(filePath, attachment.content);
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
                    let contentType = attachment.contentType || 'application/octet-stream';
                    if (!contentType || contentType === 'application/octet-stream') {
                        try {
                            const mimeTypes = require('mime-types');
                            contentType = mimeTypes.lookup(attachment.filename || '') || 'application/octet-stream';
                        } catch (e) {
                            // –ï—Å–ª–∏ mime-types –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                            const ext = attachment.filename ? attachment.filename.split('.').pop().toLowerCase() : '';
                            if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(ext)) {
                                contentType = `image/${ext === 'jpg' ? 'jpeg' : ext}`;
                            }
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?
                    const isImage = contentType.startsWith('image/');
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    db.prepare(`
                        INSERT INTO email_attachments (email_message_id, filename, content_type, file_path, file_size)
                        VALUES (?, ?, ?, ?, ?)
                    `).run(
                        emailId,
                        attachment.filename || 'attachment',
                        contentType,
                        `/uploads/email-attachments/${uniqueFilename}`,
                        attachment.size || attachment.content?.length || 0
                    );
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
                    if (isImage) {
                        imageAttachments.push({
                            path: `/uploads/email-attachments/${uniqueFilename}`,
                            filename: attachment.filename || 'image'
                        });
                    }
                    
                    console.log(`üìé –í–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${attachment.filename || 'attachment'}`);
                } catch (attachError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏—è ${attachment.filename}:`, attachError.message);
                }
            }
        }
        
        console.log(`‚úÖ –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fromEmail} - ${finalSubject} (${attachments.length} –≤–ª–æ–∂–µ–Ω–∏–π)`);
        
        // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const isSpam = folderName === 'Spam' || folderName === '–°–ø–∞–º';
        const spamPrefix = isSpam ? 'üö® –°–ü–ê–ú: ' : '';
        const preview = bodyText.substring(0, 200) + (bodyText.length > 200 ? '...' : '');
        const telegramMessage = `${spamPrefix}üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ ${process.env.EMAIL_USER}\n\nüë§ –û—Ç: ${fromName}\nüìß Email: ${fromEmail}\nüìå –¢–µ–º–∞: ${finalSubject}\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${preview}\n\nüí° –û—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!`;
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${fromEmail}...`);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if (imageAttachments.length > 0) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ caption
            const firstImage = imageAttachments[0];
            sendTelegramPhoto(firstImage.path, telegramMessage, false).then(() => {
                console.log(`‚úÖ Telegram —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${firstImage.filename}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
                for (let i = 1; i < imageAttachments.length; i++) {
                    setTimeout(() => {
                        const simpleCaption = `–§–æ—Ç–æ ${i + 1} –∏–∑ –ø–∏—Å—å–º–∞: ${imageAttachments[i].filename}`;
                        sendTelegramPhoto(imageAttachments[i].path, simpleCaption, false).catch(err => {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ #${i + 1}:`, err.message);
                        });
                    }, i * 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Ñ–æ—Ç–æ
                }
            }).catch(err => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Ñ–æ—Ç–æ –¥–ª—è ${fromEmail}:`, err.message);
                // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                sendTelegramNotification(telegramMessage, false).catch(e => {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ Telegram —Ç–µ–∫—Å—Ç–∞:`, e.message);
                });
            });
        } else {
            // –ù–µ—Ç —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            sendTelegramNotification(telegramMessage, false).then(() => {
                console.log(`‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fromEmail}`);
            }).catch(err => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ Telegram –¥–ª—è ${fromEmail}:`, err.message);
                // –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    sendTelegramNotification(telegramMessage, false).catch(e => {
                        console.error(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è ${fromEmail}`);
                    });
                }, 3000);
            });
        }
        
        return true; // –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞:', error.message);
        return false;
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏
function syncEmailsFromFolder(imap, folderName) {
    return new Promise((resolve, reject) => {
        imap.openBox(folderName, false, (err, box) => {
            if (err) {
                console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É ${folderName}:`, err.message);
                resolve({ folder: folderName, processed: 0, saved: 0 }); // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
                return;
            }
            
            const totalMessages = box.messages.total;
            console.log(`üì¨ –ü–∞–ø–∫–∞ ${folderName}: ${totalMessages} –ø–∏—Å–µ–º`);
            
            if (totalMessages === 0) {
                resolve({ folder: folderName, processed: 0, saved: 0 });
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ø–∏—Å–µ–º (–∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 100)
            const start = Math.max(1, totalMessages - 99);
            const end = totalMessages;
            
            console.log(`üì• –ü–æ–ª—É—á–∞—é –ø–∏—Å—å–º–∞ –∏–∑ ${folderName} —Å ${start} –ø–æ ${end}...`);
            
            const fetch = imap.seq.fetch(`${start}:${end}`, {
                bodies: '',
                struct: true
            });
            
            let processed = 0;
            let saved = 0;
            
            fetch.on('message', (msg, seqno) => {
                msg.on('body', (stream, info) => {
                    // –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å stream –≤ –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                    const chunks = [];
                    stream.on('data', (chunk) => {
                        chunks.push(chunk);
                    });
                    
                    stream.on('error', (streamErr) => {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∏—Å—å–º–∞ #${seqno} –∏–∑ ${folderName}:`, streamErr.message);
                    });
                    
                    stream.once('end', async () => {
                        const buffer = Buffer.concat(chunks);
                        
                        // –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
                        try {
                            const mailparser = require('mailparser');
                            let parsed;
                            if (typeof mailparser.simpleParser === 'function') {
                                parsed = await mailparser.simpleParser(buffer, {
                                    attachments: true,
                                    keepCidLinks: false
                                });
                            } else if (typeof mailparser.default?.simpleParser === 'function') {
                                parsed = await mailparser.default.simpleParser(buffer, {
                                    attachments: true,
                                    keepCidLinks: false
                                });
                            } else {
                                throw new Error('simpleParser –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ mailparser');
                            }
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram)
                            const savedEmail = await saveNewEmail(parsed, folderName);
                            if (savedEmail) {
                                saved++;
                                if (saved % 10 === 0) {
                                    console.log(`   üíæ ${folderName}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${saved} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º...`);
                                }
                            }
                        } catch (parseError) {
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞ #${seqno} –∏–∑ ${folderName}:`, parseError.message);
                        }
                    });
                });
                
                msg.once('end', () => {
                    processed++;
                });
            });
            
            fetch.once('error', (err) => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º –∏–∑ ${folderName}:`, err);
                resolve({ folder: folderName, processed, saved, error: err.message });
            });
            
            fetch.once('end', () => {
                console.log(`‚úÖ ${folderName}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processed} –ø–∏—Å–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${saved} –Ω–æ–≤—ã—Ö`);
                if (processed === 0 && saved === 0) {
                    console.log(`‚ö†Ô∏è ${folderName}: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –ø–∏—Å—å–º–∞ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!`);
                }
                resolve({ folder: folderName, processed, saved });
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
            setTimeout(() => {
                if (processed === 0) {
                    console.log(`‚ö†Ô∏è ${folderName}: —Ç–∞–π–º–∞—É—Ç - –ø–∏—Å—å–º–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ 30 —Å–µ–∫—É–Ω–¥`);
                    resolve({ folder: folderName, processed: 0, saved: 0, timeout: true });
                }
            }, 30000);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø–∏—Å–µ–º (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö) –∏–∑ INBOX –∏ Spam
function syncAllEmails() {
    return new Promise((resolve, reject) => {
        if (!process.env.EMAIL_USER || !process.env.EMAIL_PASSWORD) {
            console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã EMAIL_USER –∏–ª–∏ EMAIL_PASSWORD');
            resolve();
            return;
        }
        
        try {
            const Imap = require('imap');
            
            const imap = new Imap({
                user: process.env.EMAIL_USER,
                password: process.env.EMAIL_PASSWORD,
                host: 'imap.yandex.ru',
                port: 993,
                tls: true,
                tlsOptions: { rejectUnauthorized: false },
                connTimeout: 10000
            });
            
            imap.once('ready', async () => {
                console.log('üìß IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
                
                try {
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º INBOX
                    console.log('üì¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è INBOX...');
                    const inboxResult = await syncEmailsFromFolder(imap, 'INBOX');
                    console.log(`‚úÖ INBOX: ${inboxResult.processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${inboxResult.saved} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
                    
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Spam (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
                    let spamResult = { folder: 'Spam', processed: 0, saved: 0 };
                    console.log('üì¨ –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–∫–∏ Spam...');
                    
                    // –ü—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                    spamResult = await syncEmailsFromFolder(imap, 'Spam');
                    console.log(`üì¨ –†–µ–∑—É–ª—å—Ç–∞—Ç Spam: ${spamResult.processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${spamResult.saved} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
                    
                    // –ü—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ –ø–∞–ø–∫–∏)
                    console.log('üì¨ –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞–ø–∫–∏ –°–ø–∞–º...');
                    const spamRuResult = await syncEmailsFromFolder(imap, '–°–ø–∞–º');
                    console.log(`üì¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –°–ø–∞–º: ${spamRuResult.processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${spamRuResult.saved} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
                    
                    // –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    spamResult.processed += spamRuResult.processed;
                    spamResult.saved += spamRuResult.saved;
                    
                    if (spamResult.saved > 0) {
                        console.log(`‚úÖ Spam –≤—Å–µ–≥–æ: ${spamResult.processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${spamResult.saved} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ`);
                    }
                    
                    const totalProcessed = inboxResult.processed + spamResult.processed;
                    const totalSaved = inboxResult.saved + spamResult.saved;
                    
                    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: INBOX ${inboxResult.saved} –Ω–æ–≤—ã—Ö, Spam ${spamResult.saved} –Ω–æ–≤—ã—Ö, –≤—Å–µ–≥–æ ${totalSaved} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º`);
                    imap.end();
                    resolve({ inbox: inboxResult, spam: spamResult });
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err);
                    imap.end();
                    reject(err);
                }
            });
            
            imap.once('error', (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ IMAP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err.message);
                if (err.message && err.message.includes('Invalid login')) {
                    console.error('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ EMAIL_USER –∏ EMAIL_PASSWORD –≤ .env');
                    console.error('‚ö†Ô∏è –î–ª—è Yandex –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å)');
                    console.error('‚ö†Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: https://yandex.ru/support/id/authorization/app-passwords.html');
                }
                reject(err);
            });
            
            imap.connect();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
            reject(error);
        }
    });
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∏—Å–µ–º
if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    async function safeSyncEmails() {
        try {
            await syncAllEmails();
            console.log('‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err.message);
        }
    }
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)
    setTimeout(() => {
        console.log('üîÑ –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º...');
        safeSyncEmails();
    }, 10000);
    
    // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    setInterval(() => {
        console.log('üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)...');
        safeSyncEmails();
    }, 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã
    
    console.log('‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã, 24/7)');
} else {
    console.log('‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∏—Å–µ–º –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞: –Ω–µ —É–∫–∞–∑–∞–Ω—ã EMAIL_USER –∏–ª–∏ EMAIL_PASSWORD');
}

// API –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∏—Å–µ–º
app.post('/api/admin/emails/sync', authMiddleware, async (req, res) => {
    try {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∏—Å–µ–º...');
        
        const result = await syncAllEmails();
        
        if (result && result.error) {
            // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if (result.error.includes('Invalid login') || result.error.includes('invalid credentials')) {
                return res.status(401).json({ 
                    error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ', 
                    details: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –î–ª—è Yandex 360 –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å. –ü–æ–ª—É—á–∏—Ç—å: https://id.yandex.ru/security/app-passwords'
                });
            }
            
            return res.status(500).json({ 
                error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 
                details: result.error 
            });
        }
        
        const totalSaved = (result?.inbox?.saved || 0) + (result?.spam?.saved || 0);
        const totalProcessed = (result?.inbox?.processed || 0) + (result?.spam?.processed || 0);
        
        res.json({ 
            success: true, 
            message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalProcessed} –ø–∏—Å–µ–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${totalSaved} –Ω–æ–≤—ã—Ö`,
            inbox: result?.inbox || {},
            spam: result?.spam || {}
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        
        let errorMessage = '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏';
        let errorDetails = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        
        if (error.message && (error.message.includes('Invalid login') || error.message.includes('invalid credentials'))) {
            errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ';
            errorDetails = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –î–ª—è Yandex 360 –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ª—É—á–∏—Ç—å: https://id.yandex.ru/security/app-passwords';
        } else if (error.message && error.message.includes('IMAP is disabled')) {
            errorMessage = 'IMAP –æ—Ç–∫–ª—é—á–µ–Ω';
            errorDetails = 'IMAP –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ—á—Ç—ã. –í–∫–ª—é—á–∏—Ç–µ IMAP –≤ Yandex 360: https://360.yandex.ru/ -> –ü–æ—á—Ç–∞ -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –î–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ';
        }
        
        res.status(500).json({ 
            error: errorMessage, 
            details: errorDetails 
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`
    ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}
    üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/t1xxas
    üë§ –õ–æ–≥–∏–Ω: t1xxas
    üîë –ü–∞—Ä–æ–ª—å: Gaga00723
    `);
});

// ==================== MANUAL ORDER PROCESSING ====================
// Endpoint –¥–ª—è —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞)
app.post('/api/manual-send-last-order', async (req, res) => {
    try {
        console.log('üîß –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞...');
        
        const orderId = req.body.orderId || req.query.orderId;
        
        let lastOrder;
        if (orderId) {
            // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑
            console.log('   –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞:', orderId);
            lastOrder = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(orderId);
            if (!lastOrder) {
                return res.status(404).json({ success: false, error: `–ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ paid, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            if (lastOrder.status !== 'paid') {
                console.log('   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "paid"...');
                db.prepare('UPDATE orders SET status = ? WHERE order_id = ?').run('paid', orderId);
                lastOrder.status = 'paid';
            }
        } else {
            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            lastOrder = db.prepare(`
                SELECT * FROM orders 
                WHERE status = 'paid'
                ORDER BY created_at DESC 
                LIMIT 1
            `).get();
        }
        
        if (!lastOrder) {
            return res.status(404).json({ success: false, error: '–ù–µ –Ω–∞–π–¥–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑' });
        }
        
        console.log('üì¶ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑:', lastOrder.order_id);
        
        const products = JSON.parse(lastOrder.products);
        let emailsSent = 0;
        let emailsFailed = 0;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º emails –∫–ª–∏–µ–Ω—Ç—É
        console.log('üìß –û—Ç–ø—Ä–∞–≤–∫–∞ emails –∫–ª–∏–µ–Ω—Ç—É...');
        for (const product of products) {
            const quantity = product.quantity || 1;
            const productName = product.name || product.productName || product.product_name;
            
            let productInfo = db.prepare('SELECT * FROM products WHERE name = ?').get(productName);
            if (!productInfo) {
                const baseName = productName.split('(')[0].split('-')[0].split('|')[0].split('[')[0].trim();
                productInfo = db.prepare('SELECT * FROM products WHERE name LIKE ?').get(baseName + '%');
            }
            
            for (let i = 0; i < quantity; i++) {
                try {
                    await sendOrderEmail({
                        to: lastOrder.customer_email,
                        orderNumber: lastOrder.order_id,
                        productName: productName,
                        productImage: productInfo ? productInfo.image : (product.image || null),
                        productCategory: productInfo ? productInfo.category : null,
                        productDescription: productInfo ? productInfo.description : null,
                        login: null,
                        password: null,
                        instructions: productInfo ? productInfo.description : '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.'
                    });
                    emailsSent++;
                    console.log(`   ‚úÖ Email ${i + 1}/${quantity} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${lastOrder.customer_email} - ${productName}`);
                } catch (emailError) {
                    emailsFailed++;
                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:`, emailError.message);
                }
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        console.log('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram...');
        const telegramMsg = `üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂! (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)</b>\n\n` +
            `üÜî –ó–∞–∫–∞–∑: ${lastOrder.order_id}\n` +
            `üí≥ –ú–µ—Ç–æ–¥: ${lastOrder.payment_method || 'YooMoney'}\n` +
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${lastOrder.customer_name}\n` +
            `üìß Email: ${lastOrder.customer_email}\n` +
            `üíµ –°—É–º–º–∞: ${lastOrder.total_amount} ‚ÇΩ\n` +
            `üì¶ –¢–æ–≤–∞—Ä—ã: ${products.map(p => p.name || p.productName || p.product_name).join(', ')}\n` +
            `üìÖ –î–∞—Ç–∞: ${lastOrder.created_at}\n\n` +
            `üìä Emails: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent}, –æ—à–∏–±–æ–∫ ${emailsFailed}\n\n` +
            `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
        
        try {
            await sendTelegramNotification(telegramMsg, false);
            console.log('   ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (telegramError) {
            console.error('   ‚ùå –û—à–∏–±–∫–∞ Telegram:', telegramError.message);
        }
        
        res.json({
            success: true,
            orderId: lastOrder.order_id,
            email: lastOrder.customer_email,
            emailsSent,
            emailsFailed,
            telegramSent: true
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        res.status(500).json({ success: false, error: error.message });
    }
});

// ==================== SBP PAYMENT (–°–ë–ü) ====================
// –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –°–ë–ü (–Ω–∞—Å—Ç—Ä–æ–π –≤ .env –∏–ª–∏ –∑–¥–µ—Å—å)
const SBP_PHONE = process.env.SBP_PHONE || '+79024170636'; // –û–∑–æ–Ω –ë–∞–Ω–∫, –í–∞–ª–µ—Ä–∏–π –ë
const SBP_BANK = process.env.SBP_BANK || '–û–∑–æ–Ω –ë–∞–Ω–∫';
const SBP_NAME = process.env.SBP_NAME || '–í–∞–ª–µ—Ä–∏–π –ë';

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π —á–µ—Ä–µ–∑ –°–ë–ü
app.post('/api/payment/sbp/create', async (req, res) => {
    try {
        const { orderId, amount, customerName, customerEmail, customerPhone } = req.body;
        
        if (!orderId || !amount) {
            return res.status(400).json({ error: 'orderId –∏ amount –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "awaiting_payment" (–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã)
        const updateResult = db.prepare('UPDATE orders SET status = ? WHERE order_id = ?').run('awaiting_payment', orderId);
        
        if (updateResult.changes === 0) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formattedPhone = SBP_PHONE.replace(/(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})/, '+$1 ($2) $3-$4-$5');
        
        res.json({
            success: true,
            orderId,
            sbpPhone: SBP_PHONE,
            formattedPhone,
            amount,
            bank: SBP_BANK,
            name: SBP_NAME
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –°–ë–ü:', error);
        res.status(500).json({ error: error.message });
    }
});

// API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º —á—Ç–æ –æ–Ω –ø–µ—Ä–µ–≤–µ–ª –¥–µ–Ω—å–≥–∏ (–∫–Ω–æ–ø–∫–∞ "–Ø –ø–µ—Ä–µ–≤–µ–ª")
app.post('/api/payment/sbp/confirm', async (req, res) => {
    try {
        const { orderId } = req.body;
        
        if (!orderId) {
            return res.status(400).json({ error: 'orderId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        const order = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(orderId);
        
        if (!order) {
            return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (order.status === 'paid') {
            return res.json({ success: true, message: '–ó–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω', alreadyPaid: true });
        }
        
        const products = JSON.parse(order.products || '[]');
        const productNames = products.map(p => p.name || p.productName || p.product_name).join(', ');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const formattedPhone = SBP_PHONE.replace(/(\d{1})(\d{3})(\d{3})(\d{2})(\d{2})/, '+$1 ($2) $3-$4-$5');
        
        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const replyMarkup = {
            inline_keyboard: [
                [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `confirm_order_${orderId}` },
                    { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_order_${orderId}` }
                ]
            ]
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const telegramMessage = `üí∏ <b>–ù–û–í–´–ô –ü–õ–ê–¢–ï–ñ –°–ë–ü!</b>\n\n` +
            `üÜî –ó–∞–∫–∞–∑: <code>${orderId}</code>\n` +
            `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customer_name}\n` +
            `üìß Email: ${order.customer_email}\n` +
            `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer_phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
            `üíµ –°—É–º–º–∞: <b>${order.total_amount} ‚ÇΩ</b>\n` +
            `üì¶ –¢–æ–≤–∞—Ä—ã: ${productNames}\n\n` +
            `üî¢ <b>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –°–ë–ü:</b>\n` +
            `üì± <code>${formattedPhone}</code>\n` +
            `üí∞ –°—É–º–º–∞: <b>${order.total_amount} ‚ÇΩ</b>\n\n` +
            `‚è≥ –ö–ª–∏–µ–Ω—Ç —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —á—Ç–æ –ø–µ—Ä–µ–≤–µ–ª –¥–µ–Ω—å–≥–∏.\n` +
            `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑.`;
        
        const telegramResult = await sendTelegramNotification(telegramMessage, false, replyMarkup);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        db.prepare(`
            UPDATE orders 
            SET status = 'payment_confirmed_by_customer'
            WHERE order_id = ?
        `).run(orderId);
        
        res.json({
            success: true,
            message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –°–ë–ü:', error);
        res.status(500).json({ error: error.message });
    }
});

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –æ—Ç Telegram –±–æ—Ç–∞ (–∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
app.post('/api/telegram-webhook', async (req, res) => {
    try {
        const update = req.body;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
        if (update.callback_query) {
            const callbackData = update.callback_query.data;
            const messageId = update.callback_query.message.message_id;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–∞—à callback
            if (callbackData.startsWith('confirm_order_')) {
                const orderId = callbackData.replace('confirm_order_', '');
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
                const order = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(orderId);
                
                if (!order) {
                    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    const answerUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`;
                    await fetch(answerUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            callback_query_id: update.callback_query.id,
                            text: '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                        })
                    });
                    return res.status(200).send('OK');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "paid"
                console.log(`\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${orderId} —á–µ—Ä–µ–∑ Telegram...`);
                db.prepare('UPDATE orders SET status = ? WHERE order_id = ?').run('paid', orderId);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç—É
                const products = JSON.parse(order.products || '[]');
                let emailsSent = 0;
                let emailsFailed = 0;
                
                console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ emails –∫–ª–∏–µ–Ω—Ç—É ${order.customer_email}...`);
                console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: ${products.length}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º emails —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
                for (const product of products) {
                    const quantity = product.quantity || 1;
                    const productName = product.name || product.productName || product.product_name;
                    
                    console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞: "${productName}" (x${quantity})`);
                    
                    let productInfo = db.prepare('SELECT * FROM products WHERE name = ?').get(productName);
                    if (!productInfo) {
                        const baseName = productName.split('(')[0].split('-')[0].split('|')[0].split('[')[0].trim();
                        productInfo = db.prepare('SELECT * FROM products WHERE name LIKE ?').get(baseName + '%');
                    }
                    
                    for (let i = 0; i < quantity; i++) {
                        try {
                            console.log(`   üìß –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${i + 1}/${quantity}...`);
                            const emailResult = await sendOrderEmail({
                                to: order.customer_email,
                                orderNumber: order.order_id,
                                productName: productName,
                                productImage: productInfo ? productInfo.image : (product.image || null),
                                productCategory: productInfo ? productInfo.category : null,
                                productDescription: productInfo ? productInfo.description : null,
                                login: null,
                                password: null,
                                instructions: productInfo ? productInfo.description : '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.'
                            });
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
                            if (emailResult && emailResult.success === false) {
                                // –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å
                                emailsFailed++;
                                const errorMsg = emailResult?.error || emailResult?.message || 'Unknown error';
                                console.error(`   ‚ùå Email ${i + 1}/${quantity} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:`, errorMsg);
                                
                                if (emailResult?.note) {
                                    console.error(`   ‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:`, emailResult.note);
                                }
                            } else {
                                // success === true –∏–ª–∏ undefined - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                                emailsSent++;
                                const method = emailResult?.method || 'SMTP';
                                console.log(`   ‚úÖ Email ${i + 1}/${quantity} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–µ—Ç–æ–¥: ${method})`);
                                
                                if (!emailResult) {
                                    console.warn(`   ‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è sendOrderEmail –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ`);
                                }
                            }
                        } catch (emailError) {
                            emailsFailed++;
                            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email ${i + 1}/${quantity}:`, emailError.message);
                        }
                    }
                }
                
                console.log(`\nüìä –ò–¢–û–ì–û EMAILS: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${emailsSent}, –æ—à–∏–±–æ–∫ ${emailsFailed}`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
                const successMessage = `‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n` +
                    `üÜî –ó–∞–∫–∞–∑: <code>${orderId}</code>\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.customer_name}\n` +
                    `üìß Email: ${order.customer_email}\n` +
                    `üìä Emails –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${emailsSent} | –û—à–∏–±–æ–∫: ${emailsFailed}\n\n` +
                    `${emailsFailed > 0 ? '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ emails –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏!' : '‚úÖ –í—Å–µ emails –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'}`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                const editUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`;
                await fetch(editUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CHAT_ID,
                        message_id: messageId,
                        text: successMessage,
                        parse_mode: 'HTML'
                    })
                });
                
                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                const answerUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`;
                await fetch(answerUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        callback_query_id: update.callback_query.id,
                        text: '‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É!'
                    })
                });
                
            } else if (callbackData.startsWith('reject_order_')) {
                const orderId = callbackData.replace('reject_order_', '');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "rejected"
                db.prepare('UPDATE orders SET status = ? WHERE order_id = ?').run('rejected', orderId);
                
                // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                const answerUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`;
                await fetch(answerUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        callback_query_id: update.callback_query.id,
                        text: '‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω'
                    })
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                const order = db.prepare('SELECT * FROM orders WHERE order_id = ?').get(orderId);
                const rejectMessage = `‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n` +
                    `üÜî –ó–∞–∫–∞–∑: <code>${orderId}</code>\n` +
                    `üë§ –ö–ª–∏–µ–Ω—Ç: ${order ? order.customer_name : 'N/A'}\n` +
                    `üíµ –°—É–º–º–∞: ${order ? order.total_amount : 'N/A'} ‚ÇΩ`;
                
                const editUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/editMessageText`;
                await fetch(editUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: TELEGRAM_CHAT_ID,
                        message_id: messageId,
                        text: rejectMessage,
                        parse_mode: 'HTML'
                    })
                });
            }
        }
        
        res.status(200).send('OK');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram webhook:', error);
        res.status(500).send('Error');
    }
});


