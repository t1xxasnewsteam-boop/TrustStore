require('dotenv').config();
const Database = require('better-sqlite3');
const path = require('path');
const fetch = require('node-fetch');
const nodemailer = require('nodemailer');
const sgMail = require('@sendgrid/mail');
const fs = require('fs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
if (process.env.SENDGRID_API_KEY) {
    sgMail.setApiKey(process.env.SENDGRID_API_KEY);
}

const emailTransporter = nodemailer.createTransporter({
    host: process.env.EMAIL_HOST || 'smtp.gmail.com',
    port: parseInt(process.env.EMAIL_PORT || '587'),
    secure: process.env.EMAIL_SECURE === 'true',
    auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
    }
});

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '7268320384:AAGngFsmkg_x-2rryDtoJkmYD3ymxy5gM9o';
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '6185074849';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
const db = new Database(path.join(__dirname, 'analytics.db'));

// –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
const lastOrder = db.prepare(`
    SELECT * FROM orders 
    WHERE status = 'paid'
    ORDER BY created_at DESC 
    LIMIT 1
`).get();

if (!lastOrder) {
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑');
    db.close();
    process.exit(1);
}

console.log('üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑:');
console.log('   Order ID:', lastOrder.order_id);
console.log('   Email:', lastOrder.customer_email);
console.log('   –ò–º—è:', lastOrder.customer_name);
console.log('   –°—É–º–º–∞:', lastOrder.total_amount);
console.log('   –ú–µ—Ç–æ–¥:', lastOrder.payment_method);

const products = JSON.parse(lastOrder.products);
console.log('   –¢–æ–≤–∞—Ä—ã:', products.map(p => p.name || p.productName || p.product_name).join(', '));

// –ó–∞–≥—Ä—É–∂–∞–µ–º createOrderEmailHTML –∏–∑ server.js —á–µ—Ä–µ–∑ eval (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±
// –°–æ–∑–¥–∞–µ–º VM –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ server.js
const vm = require('vm');
const serverCode = fs.readFileSync(path.join(__dirname, 'server.js'), 'utf8');

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
const context = {
    require: require,
    module: { exports: {} },
    exports: {},
    console: console,
    process: process,
    Buffer: Buffer,
    __dirname: __dirname,
    __filename: path.join(__dirname, 'server.js'),
    global: global,
    setTimeout: setTimeout,
    setInterval: setInterval,
    clearTimeout: clearTimeout,
    clearInterval: clearInterval
};

// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ server.js –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –Ω–æ —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è email
// –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ - —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API endpoint

// –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
async function sendOrderEmail(data) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω email –∏–∑ server.js —á–µ—Ä–µ–∑ require (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    // –ù–æ –ø—Ä–æ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ HTML
    
    const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body style="margin:0;padding:0;font-family:Arial,sans-serif;background:#f5f5f5">
    <table width="100%" cellpadding="0" cellspacing="0" style="background:#f5f5f5;padding:40px 20px">
        <tr><td align="center">
            <table width="600" cellpadding="0" cellspacing="0" style="background:white;border-radius:16px;overflow:hidden">
                <tr><td style="background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);padding:40px;text-align:center">
                    <h1 style="color:white;margin:0;font-size:28px">Trust Store</h1>
                </td></tr>
                <tr><td style="padding:40px">
                    <h2 style="color:#1a1a1a;margin:0 0 20px">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>
                    <p style="color:#666;line-height:1.6;margin:0 0 20px">–í–∞—à –∑–∞–∫–∞–∑ <strong>#${data.orderNumber}</strong> —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.</p>
                    <p style="color:#666;line-height:1.6;margin:0 0 20px"><strong>–¢–æ–≤–∞—Ä:</strong> ${data.productName}</p>
                    <p style="color:#666;line-height:1.6;margin:0 0 40px">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.</p>
                    <p style="color:#999;font-size:14px;margin:0">–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>Trust Store</p>
                </td></tr>
            </table>
        </td></tr>
    </table>
</body>
</html>
    `;
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SendGrid
    if (process.env.SENDGRID_API_KEY) {
        try {
            await sgMail.send({
                to: data.to,
                from: process.env.EMAIL_USER || 'orders@truststore.ru',
                subject: `–í–∞—à –∑–∞–∫–∞–∑ #${data.orderNumber} | Trust Store`,
                html
            });
            console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SendGrid: ${data.to}`);
            return { success: true };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ SendGrid:', error.message);
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ SMTP
    try {
        await emailTransporter.sendMail({
            from: process.env.EMAIL_FROM || '"Trust Store" <orders@truststore.ru>',
            to: data.to,
            subject: `–í–∞—à –∑–∞–∫–∞–∑ #${data.orderNumber} | Trust Store`,
            html
        });
        console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SMTP: ${data.to}`);
        return { success: true };
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SMTP:', error.message);
        return { success: false, error: error.message };
    }
}

async function sendTelegram(message) {
    try {
        const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
        const data = await response.json();
        return data.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram:', error.message);
        return false;
    }
}

async function main() {
    console.log('\nüìß –û–¢–ü–†–ê–í–ö–ê EMAIL –ö–õ–ò–ï–ù–¢–£...');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    for (const product of products) {
        const quantity = product.quantity || 1;
        const productName = product.name || product.productName || product.product_name;
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        let productInfo = db.prepare('SELECT * FROM products WHERE name = ?').get(productName);
        if (!productInfo) {
            const baseName = productName.split('(')[0].split('-')[0].split('|')[0].split('[')[0].trim();
            productInfo = db.prepare('SELECT * FROM products WHERE name LIKE ?').get(baseName + '%');
        }
        
        for (let i = 0; i < quantity; i++) {
            const result = await sendOrderEmail({
                to: lastOrder.customer_email,
                orderNumber: lastOrder.order_id,
                productName: productName,
                productImage: productInfo ? productInfo.image : (product.image || null),
                productCategory: productInfo ? productInfo.category : null,
                productDescription: productInfo ? productInfo.description : null,
                login: null,
                password: null,
                instructions: productInfo ? productInfo.description : '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.'
            });
            
            if (result && result.success) {
                console.log(`   ‚úÖ Email ${i + 1}/${quantity} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${lastOrder.customer_email}`);
            } else {
                console.log(`   ‚ùå Email ${i + 1}/${quantity} –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
            }
        }
    }
    
    console.log('\nüì± –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM...');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const telegramMsg = `üí∞ <b>–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂! (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)</b>\n\n` +
        `üÜî –ó–∞–∫–∞–∑: ${lastOrder.order_id}\n` +
        `üí≥ –ú–µ—Ç–æ–¥: ${lastOrder.payment_method || 'YooMoney'}\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${lastOrder.customer_name}\n` +
        `üìß Email: ${lastOrder.customer_email}\n` +
        `üíµ –°—É–º–º–∞: ${lastOrder.total_amount} ‚ÇΩ\n` +
        `üì¶ –¢–æ–≤–∞—Ä—ã: ${products.map(p => p.name || p.productName || p.product_name).join(', ')}\n` +
        `üìÖ –î–∞—Ç–∞: ${lastOrder.created_at}\n\n` +
        `üîó <a href="https://truststore.ru/t1xxas">–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É</a>`;
    
    const telegramSent = await sendTelegram(telegramMsg);
    if (telegramSent) {
        console.log('   ‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    } else {
        console.log('   ‚ùå Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)');
    }
    
    db.close();
    console.log('\n‚úÖ –ì–û–¢–û–í–û! –í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
    process.exit(0);
}

main().catch(error => {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
    console.error(error.stack);
    db.close();
    process.exit(1);
});
