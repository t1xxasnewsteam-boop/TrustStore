// –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
(function() {
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∞—Ç–∞
    const chatHTML = `
        <!-- –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ -->
        <button class="chat-widget-button" id="chatButton">
            <svg viewBox="0 0 24 24">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
            <div class="chat-notification" id="chatNotification" style="display: none;"></div>
        </button>

        <!-- –û–∫–Ω–æ —á–∞—Ç–∞ -->
        <div class="chat-widget-window" id="chatWindow">
            <div class="chat-header">
                <div class="chat-avatar">
                    <img src="support-image.png" alt="Support" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                </div>
                <div class="chat-header-info">
                    <h3>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Trust Store</h3>
                    <p class="chat-status">
                        <span class="chat-status-dot"></span>
                        –û–Ω–ª–∞–π–Ω
                    </p>
                </div>
            </div>
            
            <div class="chat-body" id="chatBody">
                <!-- –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞ -->
            </div>
            
            <div class="chat-footer">
                <input 
                    type="text" 
                    class="chat-input" 
                    id="chatInput" 
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    autocomplete="off"
                >
                <button class="chat-send-btn" id="chatSendBtn">
                    ‚û§
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ body
    document.addEventListener('DOMContentLoaded', function() {
        document.body.insertAdjacentHTML('beforeend', chatHTML);
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã
        const chatButton = document.getElementById('chatButton');
        const chatWindow = document.getElementById('chatWindow');
        const chatBody = document.getElementById('chatBody');
        const chatInput = document.getElementById('chatInput');
        const chatSendBtn = document.getElementById('chatSendBtn');
        const chatNotification = document.getElementById('chatNotification');
        
        let isOpen = false;
        let botMessageShown = false;
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
        chatButton.addEventListener('click', function() {
            isOpen = !isOpen;
            
            if (isOpen) {
                chatWindow.classList.add('active');
                chatButton.classList.add('chat-open');
                chatNotification.style.display = 'none';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                if (!botMessageShown) {
                    setTimeout(() => {
                        showTypingIndicator();
                        
                        setTimeout(() => {
                            hideTypingIndicator();
                            addBotMessage('–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä');
                            
                            setTimeout(() => {
                                addBotMessage('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á—É!', true);
                            }, 800);
                        }, 1500);
                    }, 500);
                    
                    botMessageShown = true;
                }
                
                chatInput.focus();
            } else {
                chatWindow.classList.remove('active');
                chatButton.classList.remove('chat-open');
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        function sendMessage() {
            const message = chatInput.value.trim();
            
            if (message) {
                addUserMessage(message);
                chatInput.value = '';
                
                // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
                setTimeout(() => {
                    showTypingIndicator();
                    
                    setTimeout(() => {
                        hideTypingIndicator();
                        addBotMessage('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. üòä<br><br>üì± –î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ <a href="https://t.me/truststore_admin" target="_blank" style="color: #667eea; font-weight: 600; text-decoration: none;">Telegram</a>!');
                    }, 2000);
                }, 500);
            }
        }
        
        chatSendBtn.addEventListener('click', sendMessage);
        
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        function addBotMessage(text, withButtons = false) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Bot" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div class="chat-message-bubble">${text}</div>
                        <div class="chat-message-time">${time}</div>
                        ${withButtons ? `
                            <div class="quick-replies">
                                <button class="quick-reply-btn" onclick="handleQuickReply('payment')">
                                    üí≥ –í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ
                                </button>
                                <button class="quick-reply-btn" onclick="handleQuickReply('order')">
                                    üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                                </button>
                                <button class="quick-reply-btn" onclick="handleQuickReply('other')">
                                    ‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å
                                </button>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function addUserMessage(text) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message user">
                    <div class="chat-message-avatar">üë§</div>
                    <div class="chat-message-content">
                        <div class="chat-message-bubble">${text}</div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        let typingIndicator;
        
        function showTypingIndicator() {
            const indicatorHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Bot" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div class="typing-indicator active">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', indicatorHTML);
            typingIndicator = chatBody.lastElementChild;
            scrollToBottom();
        }
        
        function hideTypingIndicator() {
            if (typingIndicator) {
                typingIndicator.remove();
                typingIndicator = null;
            }
        }
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        function scrollToBottom() {
            setTimeout(() => {
                chatBody.scrollTop = chatBody.scrollHeight;
            }, 100);
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            if (!isOpen) {
                chatNotification.style.display = 'block';
            }
        }, 5000);
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        window.handleQuickReply = function(type) {
            const replies = {
                payment: '–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ',
                order: '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
                other: '–£ –º–µ–Ω—è –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å'
            };
            
            addUserMessage(replies[type]);
            
            setTimeout(() => {
                showTypingIndicator();
                
                setTimeout(() => {
                    hideTypingIndicator();
                    
                    const responses = {
                        payment: '–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆMoney –∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –û–ø–ª–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞! üí≥',
                        order: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –ø–æ–∫—É–ø–∫—É. üìß',
                        other: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. üë®‚Äçüíº'
                    };
                    
                    addBotMessage(responses[type]);
                }, 1500);
            }, 300);
        };
    });
})();

