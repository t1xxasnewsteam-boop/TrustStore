// –í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
(function() {
    // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∞—Ç–∞
    const chatHTML = `
        <!-- –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ -->
        <button class="chat-widget-button" id="chatButton">
            <svg viewBox="0 0 24 24">
                <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
            <div class="chat-notification" id="chatNotification" style="display: none;"></div>
        </button>

        <!-- –û–∫–Ω–æ —á–∞—Ç–∞ -->
        <div class="chat-widget-window" id="chatWindow">
            <div class="chat-header">
                <div class="chat-avatar">
                    <img src="support-image.png" alt="Support" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                </div>
                <div class="chat-header-info">
                    <h3>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Trust Store</h3>
                    <p class="chat-status">
                        <span class="chat-status-dot"></span>
                        –û–Ω–ª–∞–π–Ω
                    </p>
                </div>
                <button class="chat-close-btn" id="chatCloseBtn">√ó</button>
            </div>
            
            <div class="chat-body" id="chatBody">
                <!-- –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—é–¥–∞ -->
            </div>
            
            <div class="chat-footer">
                <input 
                    type="file" 
                    id="chatImageInput" 
                    accept="image/*,.pdf" 
                    style="display: none;"
                >
                <button class="chat-image-btn" id="chatImageBtn" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
                    +
                </button>
                <input 
                    type="text" 
                    class="chat-input" 
                    id="chatInput" 
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    autocomplete="off"
                >
                <button class="chat-send-btn" id="chatSendBtn">
                    ‚û§
                </button>
                <button class="chat-new-dialog-btn" id="chatNewDialogBtn" title="–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥" style="display: none; position: absolute; top: -45px; right: 10px; background: #f0f0f0; border: none; padding: 8px 16px; border-radius: 8px; font-size: 12px; cursor: pointer; color: #666; font-weight: 600;">
                    üîÑ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                </button>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ body
    document.addEventListener('DOMContentLoaded', function() {
        document.body.insertAdjacentHTML('beforeend', chatHTML);
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã
        const chatButton = document.getElementById('chatButton');
        const chatWindow = document.getElementById('chatWindow');
        const chatBody = document.getElementById('chatBody');
        const chatInput = document.getElementById('chatInput');
        const chatSendBtn = document.getElementById('chatSendBtn');
        const chatNotification = document.getElementById('chatNotification');
        const chatCloseBtn = document.getElementById('chatCloseBtn');
        const chatImageBtn = document.getElementById('chatImageBtn');
        const chatImageInput = document.getElementById('chatImageInput');
        const chatNewDialogBtn = document.getElementById('chatNewDialogBtn');
        
        let isOpen = false;
        let botMessageShown = false;
        let ticketId = localStorage.getItem('supportTicketId') || null;
        let customerName = localStorage.getItem('customerName') || null;
        let customerEmail = localStorage.getItem('customerEmail') || null;
        let lastMessageId = 0;
        let pollingInterval = null;
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
        chatCloseBtn.addEventListener('click', function(e) {
            e.stopPropagation();
            chatWindow.classList.remove('active');
            chatButton.classList.remove('chat-open');
            isOpen = false;
        });
        
        // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
        chatButton.addEventListener('click', function() {
            isOpen = !isOpen;
            
            if (isOpen) {
                chatWindow.classList.add('active');
                chatButton.classList.add('chat-open');
                chatNotification.style.display = 'none';
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π (–ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
                if (ticketId) {
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–∫–µ—Ç:', ticketId);
                    loadChatHistory();
                    botMessageShown = true; // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –±–æ—Ç —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
                    if (chatNewDialogBtn) chatNewDialogBtn.style.display = 'block';
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
                    if (chatNewDialogBtn) chatNewDialogBtn.style.display = 'none';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–∞
                    if (!botMessageShown) {
                        setTimeout(() => {
                            showTypingIndicator();
                            
                            setTimeout(() => {
                                hideTypingIndicator();
                                addBotMessage('–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä');
                                
                                setTimeout(() => {
                                    addBotMessage('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á—É!', true);
                                }, 800);
                            }, 1500);
                        }, 500);
                        
                        botMessageShown = true;
                    }
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                startPolling();
                
                chatInput.focus();
            } else {
                chatWindow.classList.remove('active');
                chatButton.classList.remove('chat-open');
                
                // –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–ª—É—à–∞—Ç—å –¥–∞–∂–µ –∫–æ–≥–¥–∞ —á–∞—Ç –∑–∞–∫—Ä—ã—Ç
                // stopPolling();
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        async function sendMessage() {
            const message = chatInput.value.trim();
            
            if (message) {
                addUserMessage(message);
                chatInput.value = '';
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –∏ email
                if (!ticketId && !customerName) {
                    // –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
                    customerName = '–ì–æ—Å—Ç—å';
                }
                
                try {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    const response = await fetch('/api/support/send-message', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            ticketId: ticketId,
                            customerName: customerName,
                            customerEmail: customerEmail,
                            message: message
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success && data.ticketId) {
                        ticketId = data.ticketId;
                        localStorage.setItem('supportTicketId', ticketId);
                        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∏–∫–µ—Ç:', ticketId);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
                        if (chatNewDialogBtn) chatNewDialogBtn.style.display = 'block';
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ–º polling
                        if (!pollingInterval) {
                            startPolling();
                        }
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            }
        }
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞
        async function sendImage(file) {
            try {
                const isPDF = file.type === 'application/pdf';
                console.log('üì§ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏', isPDF ? 'PDF' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                console.log('üìÅ –§–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–¢–∏–ø:', file.type);
                
                // –°–æ–∑–¥–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (!ticketId && !customerName) {
                    customerName = '–ì–æ—Å—Ç—å';
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä 
                if (isPDF) {
                    addUserFile(file.name, null); // –ü–æ–∫–∞–∂–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ —Å—Å—ã–ª–∫–∏
                } else {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        addUserImage(e.target.result);
                    };
                    reader.readAsDataURL(file);
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const formData = new FormData();
                formData.append('image', file);
                
                console.log('‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                
                const uploadResponse = await fetch('/api/support/upload-image', {
                    method: 'POST',
                    body: formData
                });
                
                console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', uploadResponse.status, uploadResponse.statusText);
                
                if (!uploadResponse.ok) {
                    const errorText = await uploadResponse.text();
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
                    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                    return;
                }
                
                const uploadData = await uploadResponse.json();
                console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', uploadData);
                
                if (!uploadData.success) {
                    console.error('‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', uploadData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                    return;
                }
                
                const imageUrl = uploadData.imageUrl;
                console.log('‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', imageUrl);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
                const messageText = isPDF ? 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç PDF' : 'üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                console.log('üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º...');
                
                const response = await fetch('/api/support/send-message', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        ticketId: ticketId,
                        customerName: customerName,
                        customerEmail: customerEmail,
                        message: messageText,
                        imageUrl: imageUrl
                    })
                });
                
                const data = await response.json();
                console.log('üì¨ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
                
                if (data.success && data.ticketId) {
                    ticketId = data.ticketId;
                    localStorage.setItem('supportTicketId', ticketId);
                    console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∏–∫–µ—Ç:', ticketId);
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
                    if (chatNewDialogBtn) chatNewDialogBtn.style.display = 'block';
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–ø—É—Å–∫–∞–µ–º polling
                    if (!pollingInterval) {
                        startPolling();
                    }
                } else {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
                    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
                }
            } catch (error) {
                console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                console.error('Stack:', error.stack);
                alert('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ' + error.message);
            }
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        async function loadChatHistory() {
            if (!ticketId) return;
            
            console.log('üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞:', ticketId);
            
            try {
                const response = await fetch(`/api/support/messages/${ticketId}`);
                if (response.ok) {
                    const data = await response.json();
                    
                    console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', data.messages.length);
                    
                    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —á–∞—Ç
                    chatBody.innerHTML = '';
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö
                    if (data.messages && data.messages.length > 0) {
                        data.messages.forEach(msg => {
                            if (msg.sender_type === 'customer') {
                                if (msg.image_url) {
                                    const isPDF = msg.image_url.toLowerCase().endsWith('.pdf');
                                    if (isPDF) {
                                        const fileName = msg.image_url.split('/').pop();
                                        addUserFile(fileName, msg.image_url, false);
                                    } else {
                                        addUserImage(msg.image_url, false);
                                    }
                                } else {
                                    addUserMessage(msg.message, false);
                                }
                            } else if (msg.sender_type === 'admin') {
                                if (msg.image_url) {
                                    const isPDF = msg.image_url.toLowerCase().endsWith('.pdf');
                                    if (isPDF) {
                                        const fileName = msg.image_url.split('/').pop();
                                        addAdminFile(fileName, msg.image_url, msg.sender_name);
                                    } else {
                                        addAdminImage(msg.image_url, msg.sender_name);
                                    }
                                } else {
                                    addAdminMessage(msg.message, msg.sender_name);
                                }
                            } else if (msg.sender_type === 'system') {
                                addSystemMessage(msg.message);
                            }
                            
                            if (msg.id > lastMessageId) {
                                lastMessageId = msg.id;
                            }
                        });
                        
                        console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, lastMessageId:', lastMessageId);
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                        console.log('‚ÑπÔ∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ');
                        addBotMessage('–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä');
                        addBotMessage('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á—É!', true);
                    }
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
                    scrollToBottom();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            }
        }
        
        // Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        function startPolling() {
            // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç ticketId (–æ–Ω –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è)
            if (pollingInterval) {
                clearInterval(pollingInterval);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            pollingInterval = setInterval(async () => {
                if (!ticketId) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–∞
                
                try {
                    const response = await fetch(`/api/support/messages/${ticketId}`);
                    if (response.ok) {
                        const data = await response.json();
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        const newMessages = data.messages.filter(msg => msg.id > lastMessageId);
                        
                        newMessages.forEach(msg => {
                            if (msg.sender_type === 'admin') {
                                // –ï—Å–ª–∏ —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                                if (isOpen) {
                                    showTypingIndicator();
                                    setTimeout(() => {
                                        hideTypingIndicator();
                                        if (msg.image_url) {
                                            const isPDF = msg.image_url.toLowerCase().endsWith('.pdf');
                                            if (isPDF) {
                                                const fileName = msg.image_url.split('/').pop();
                                                addAdminFile(fileName, msg.image_url, msg.sender_name);
                                            } else {
                                                addAdminImage(msg.image_url, msg.sender_name);
                                            }
                                        } else {
                                            addAdminMessage(msg.message, msg.sender_name);
                                        }
                                    }, 1000);
                                }
                                
                                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                                playNotificationSound();
                                
                                // –ï—Å–ª–∏ —á–∞—Ç –∑–∞–∫—Ä—ã—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ
                                if (!isOpen) {
                                    const isPDF = msg.image_url && msg.image_url.toLowerCase().endsWith('.pdf');
                                    const shortMessage = msg.image_url ? (isPDF ? 'üìÑ –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç' : 'üì∑ –í–∞–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') : (msg.message.length > 80 
                                        ? msg.message.substring(0, 80) + '...' 
                                        : msg.message);
                                    showSiteNotification(shortMessage);
                                    chatNotification.style.display = 'block';
                                }
                            } else if (msg.sender_type === 'system') {
                                if (isOpen) {
                                    addSystemMessage(msg.message);
                                }
                                playNotificationSound();
                            }
                            
                            if (msg.id > lastMessageId) {
                                lastMessageId = msg.id;
                            }
                        });
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ polling:', error);
                }
            }, 3000);
        }
        
        function stopPolling() {
            if (pollingInterval) {
                clearInterval(pollingInterval);
                pollingInterval = null;
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ù–ê —Å–∞–π—Ç–µ
        function showSiteNotification(message) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            let notifContainer = document.getElementById('chat-notification-popup');
            if (!notifContainer) {
                notifContainer = document.createElement('div');
                notifContainer.id = 'chat-notification-popup';
                notifContainer.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 20px 25px;
                    border-radius: 15px;
                    box-shadow: 0 10px 40px rgba(102, 126, 234, 0.4);
                    z-index: 999999;
                    max-width: 350px;
                    cursor: pointer;
                    animation: slideInRight 0.4s ease-out;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                `;
                document.body.appendChild(notifContainer);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                const style = document.createElement('style');
                style.textContent = `
                    @keyframes slideInRight {
                        from {
                            transform: translateX(400px);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                    @keyframes slideOutRight {
                        from {
                            transform: translateX(0);
                            opacity: 1;
                        }
                        to {
                            transform: translateX(400px);
                            opacity: 0;
                        }
                    }
                `;
                document.head.appendChild(style);
            }
            
            // –ö–æ–Ω—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifContainer.innerHTML = `
                <div style="display: flex; align-items: flex-start; gap: 15px;">
                    <div style="font-size: 32px;">üí¨</div>
                    <div style="flex: 1;">
                        <div style="font-weight: 700; font-size: 16px; margin-bottom: 5px;">
                            –í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ —á–∞—Ç–µ
                        </div>
                        <div style="font-size: 14px; opacity: 0.95; line-height: 1.4;">
                            ${message}
                        </div>
                        <div style="font-size: 12px; opacity: 0.8; margin-top: 8px;">
                            –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å
                        </div>
                    </div>
                    <button onclick="event.stopPropagation(); this.closest('#chat-notification-popup').remove();" style="background: rgba(255,255,255,0.2); border: none; color: white; width: 24px; height: 24px; border-radius: 50%; cursor: pointer; font-size: 16px; line-height: 1;">√ó</button>
                </div>
            `;
            
            // –ü—Ä–∏ –∫–ª–∏–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
            notifContainer.onclick = function() {
                if (!isOpen) {
                    chatButton.click();
                }
                notifContainer.style.animation = 'slideOutRight 0.3s ease-in';
                setTimeout(() => notifContainer.remove(), 300);
            };
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 8 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                if (notifContainer && notifContainer.parentNode) {
                    notifContainer.style.animation = 'slideOutRight 0.3s ease-in';
                    setTimeout(() => {
                        if (notifContainer && notifContainer.parentNode) {
                            notifContainer.remove();
                        }
                    }, 300);
                }
            }, 8000);
        }
        
        // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        function playNotificationSound() {
            try {
                const audio = new Audio('notification.mp3');
                audio.volume = 0.5; // –ì—Ä–æ–º–∫–æ—Å—Ç—å 50%
                audio.play().catch(err => console.log('–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω:', err));
            } catch (error) {
                console.log('–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω:', error);
            }
        }
        
        chatSendBtn.addEventListener('click', sendMessage);
        
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        chatImageBtn.addEventListener('click', function() {
            chatImageInput.click();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        chatImageInput.addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            console.log('üñºÔ∏è –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', file.name, '–†–∞–∑–º–µ—Ä:', file.size, '–¢–∏–ø:', file.type);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å 10 –ú–ë)
            if (file.size > 10 * 1024 * 1024) {
                console.error('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', file.size);
                alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ú–ë');
                chatImageInput.value = '';
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ PDF
            const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'application/pdf'];
            const isAllowed = file.type.startsWith('image/') || file.type === 'application/pdf';
            
            if (!isAllowed) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', file.type);
                alert('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, GIF, WEBP) –∏–ª–∏ PDF');
                chatImageInput.value = '';
                return;
            }
            
            console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –æ—Ç–ø—Ä–∞–≤–∫–∞...');
            
            await sendImage(file);
            chatImageInput.value = '';
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥"
        if (chatNewDialogBtn) {
            chatNewDialogBtn.addEventListener('click', function() {
                if (confirm('–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥? –¢–µ–∫—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏.')) {
                    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    localStorage.removeItem('supportTicketId');
                    localStorage.removeItem('customerName');
                    localStorage.removeItem('customerEmail');
                    ticketId = null;
                    customerName = null;
                    customerEmail = null;
                    lastMessageId = 0;
                    botMessageShown = false;
                    
                    // –û—á–∏—â–∞–µ–º —á–∞—Ç
                    chatBody.innerHTML = '';
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    chatNewDialogBtn.style.display = 'none';
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                    setTimeout(() => {
                        showTypingIndicator();
                        
                        setTimeout(() => {
                            hideTypingIndicator();
                            addBotMessage('–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä');
                            
                            setTimeout(() => {
                                addBotMessage('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á—É!', true);
                            }, 800);
                        }, 1500);
                    }, 500);
                    
                    botMessageShown = true;
                    
                    console.log('‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥');
                }
            });
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        function addBotMessage(text, withButtons = false) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Bot" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div class="chat-message-bubble">${text}</div>
                        <div class="chat-message-time">${time}</div>
                        ${withButtons ? `
                            <div class="quick-replies">
                                <button class="quick-reply-btn" onclick="handleQuickReply('payment')">
                                    üí≥ –í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ
                                </button>
                                <button class="quick-reply-btn" onclick="handleQuickReply('order')">
                                    üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                                </button>
                                <button class="quick-reply-btn" onclick="handleQuickReply('other')">
                                    ‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å
                                </button>
                            </div>
                        ` : ''}
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function addUserMessage(text, shouldScroll = true) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message user">
                    <div class="chat-message-avatar">üë§</div>
                    <div class="chat-message-content">
                        <div class="chat-message-bubble">${text}</div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            if (shouldScroll) scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function addUserImage(imageUrl, shouldScroll = true) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message user">
                    <div class="chat-message-avatar">üë§</div>
                    <div class="chat-message-content">
                        <div class="chat-message-bubble" style="padding: 4px;">
                            <img src="${imageUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100%; border-radius: 10px; cursor: pointer;" onclick="window.open('${imageUrl}', '_blank')">
                        </div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            if (shouldScroll) scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        function addUserFile(fileName, fileUrl, shouldScroll = true) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message user">
                    <div class="chat-message-avatar">üë§</div>
                    <div class="chat-message-content">
                        <div class="chat-message-bubble">
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <div style="font-size: 32px;">üìÑ</div>
                                <div style="flex: 1;">
                                    <div style="font-weight: 600; margin-bottom: 4px;">${fileName}</div>
                                    ${fileUrl ? `<a href="${fileUrl}" target="_blank" style="color: #6c5ce7; text-decoration: none; font-size: 13px;">–°–∫–∞—á–∞—Ç—å PDF</a>` : '<span style="color: #999; font-size: 13px;">–ó–∞–≥—Ä—É–∑–∫–∞...</span>'}
                                </div>
                            </div>
                        </div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            if (shouldScroll) scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        function addAdminMessage(text, senderName = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Support" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div style="font-size: 11px; color: #667eea; font-weight: 600; margin-bottom: 4px;">
                            ${senderName}
                        </div>
                        <div class="chat-message-bubble">${text}</div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
        function addAdminImage(imageUrl, senderName = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Support" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div style="font-size: 11px; color: #667eea; font-weight: 600; margin-bottom: 4px;">
                            ${senderName}
                        </div>
                        <div class="chat-message-bubble" style="padding: 4px;">
                            <img src="${imageUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100%; border-radius: 10px; cursor: pointer;" onclick="window.open('${imageUrl}', '_blank')">
                        </div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è PDF —Ñ–∞–π–ª–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
        function addAdminFile(fileName, fileUrl, senderName = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Support" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div style="font-size: 11px; color: #667eea; font-weight: 600; margin-bottom: 4px;">
                            ${senderName}
                        </div>
                        <div class="chat-message-bubble">
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <div style="font-size: 32px;">üìÑ</div>
                                <div style="flex: 1;">
                                    <div style="font-weight: 600; margin-bottom: 4px;">${fileName}</div>
                                    <a href="${fileUrl}" target="_blank" style="color: #6c5ce7; text-decoration: none; font-size: 13px;">–°–∫–∞—á–∞—Ç—å PDF</a>
                                </div>
                            </div>
                        </div>
                        <div class="chat-message-time">${time}</div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        function addSystemMessage(text) {
            const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            
            const messageHTML = `
                <div style="text-align: center; margin: 15px 0;">
                    <div style="display: inline-block; background: #f0f0f0; color: #666; padding: 8px 16px; border-radius: 20px; font-size: 12px; font-weight: 500;">
                        ${text}
                    </div>
                    <div style="font-size: 10px; color: #999; margin-top: 4px;">${time}</div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', messageHTML);
            scrollToBottom();
        }
        
        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è
        let typingIndicator;
        
        function showTypingIndicator() {
            const indicatorHTML = `
                <div class="chat-message bot">
                    <div class="chat-message-avatar">
                        <img src="support-image.png" alt="Bot" style="width: 100%; height: 100%; object-fit: cover; border-radius: 50%;">
                    </div>
                    <div class="chat-message-content">
                        <div class="typing-indicator active">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                </div>
            `;
            
            chatBody.insertAdjacentHTML('beforeend', indicatorHTML);
            typingIndicator = chatBody.lastElementChild;
            scrollToBottom();
        }
        
        function hideTypingIndicator() {
            if (typingIndicator) {
                typingIndicator.remove();
                typingIndicator = null;
            }
        }
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        function scrollToBottom() {
            setTimeout(() => {
                chatBody.scrollTop = chatBody.scrollHeight;
            }, 100);
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setTimeout(() => {
            if (!isOpen) {
                chatNotification.style.display = 'block';
            }
        }, 5000);
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∏–∫–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º polling —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (ticketId) {
            startPolling();
        }
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        window.handleQuickReply = function(type) {
            const replies = {
                payment: '–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ',
                order: '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
                other: '–£ –º–µ–Ω—è –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å'
            };
            
            addUserMessage(replies[type]);
            
            setTimeout(() => {
                showTypingIndicator();
                
                setTimeout(() => {
                    hideTypingIndicator();
                    
                    const responses = {
                        payment: '–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆMoney –∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –û–ø–ª–∞—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞! üí≥',
                        order: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ email, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–ª—è–ª–∏ –ø–æ–∫—É–ø–∫—É. üìß',
                        other: '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å! –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ–¥–∫–ª—é—á—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. üë®‚Äçüíº'
                    };
                    
                    addBotMessage(responses[type]);
                }, 1500);
            }, 300);
        };
    });
})();

